
I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000964  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000aec  08000aec  00008aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000af0  08000af0  00008af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000020  20000000  20000000  00010000  2**2
                  ALLOC
  5 ._user_heap_stack 00000400  20000020  20000020  00010000  2**0
                  ALLOC
  6 .ARM.attributes 00000030  00000000  00000000  00008af4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000015bc  00000000  00000000  00008b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004c7  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000178  00000000  00000000  0000a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  0000a720  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000c1e  00000000  00000000  0000a858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000060b  00000000  00000000  0000b476  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000082  00000000  00000000  0000ba81  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000338  00000000  00000000  0000bb04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ad4 	.word	0x08000ad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000ad4 	.word	0x08000ad4
 80001c4:	20000004 	.word	0x20000004

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4b15      	ldr	r3, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001ce:	4a15      	ldr	r2, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001d0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80001d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80001d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001de:	4a12      	ldr	r2, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001e0:	6812      	ldr	r2, [r2, #0]
 80001e2:	f042 0201 	orr.w	r2, r2, #1
 80001e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x60>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <SystemInit+0x60>)
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <SystemInit+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x60>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x64>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000208:	6812      	ldr	r2, [r2, #0]
 800020a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800020e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x60>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f80b 	bl	8000230 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b02      	ldr	r3, [pc, #8]	; (8000224 <SystemInit+0x5c>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bd80      	pop	{r7, pc}
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010

08000230 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	2300      	movs	r3, #0
 800023c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800023e:	4b35      	ldr	r3, [pc, #212]	; (8000314 <SetSysClock+0xe4>)
 8000240:	4a34      	ldr	r2, [pc, #208]	; (8000314 <SetSysClock+0xe4>)
 8000242:	6812      	ldr	r2, [r2, #0]
 8000244:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000248:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024a:	4b32      	ldr	r3, [pc, #200]	; (8000314 <SetSysClock+0xe4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000252:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d103      	bne.n	8000268 <SetSysClock+0x38>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000266:	d1f0      	bne.n	800024a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000268:	4b2a      	ldr	r3, [pc, #168]	; (8000314 <SetSysClock+0xe4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000274:	2301      	movs	r3, #1
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	e001      	b.n	800027e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d142      	bne.n	800030a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000284:	4b23      	ldr	r3, [pc, #140]	; (8000314 <SetSysClock+0xe4>)
 8000286:	4a23      	ldr	r2, [pc, #140]	; (8000314 <SetSysClock+0xe4>)
 8000288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800028a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800028e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <SetSysClock+0xe8>)
 8000292:	4a21      	ldr	r2, [pc, #132]	; (8000318 <SetSysClock+0xe8>)
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800029a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800029c:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <SetSysClock+0xe4>)
 800029e:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <SetSysClock+0xe4>)
 80002a0:	6892      	ldr	r2, [r2, #8]
 80002a2:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <SetSysClock+0xe4>)
 80002a6:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <SetSysClock+0xe4>)
 80002a8:	6892      	ldr	r2, [r2, #8]
 80002aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80002ae:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <SetSysClock+0xe4>)
 80002b2:	4a18      	ldr	r2, [pc, #96]	; (8000314 <SetSysClock+0xe4>)
 80002b4:	6892      	ldr	r2, [r2, #8]
 80002b6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002ba:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <SetSysClock+0xe4>)
 80002be:	4a17      	ldr	r2, [pc, #92]	; (800031c <SetSysClock+0xec>)
 80002c0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <SetSysClock+0xe4>)
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <SetSysClock+0xe4>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002cc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002ce:	bf00      	nop
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <SetSysClock+0xe4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <SetSysClock+0xf0>)
 80002de:	f240 7205 	movw	r2, #1797	; 0x705
 80002e2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <SetSysClock+0xe4>)
 80002e6:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <SetSysClock+0xe4>)
 80002e8:	6892      	ldr	r2, [r2, #8]
 80002ea:	f022 0203 	bic.w	r2, r2, #3
 80002ee:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <SetSysClock+0xe4>)
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <SetSysClock+0xe4>)
 80002f4:	6892      	ldr	r2, [r2, #8]
 80002f6:	f042 0202 	orr.w	r2, r2, #2
 80002fa:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002fc:	bf00      	nop
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <SetSysClock+0xe4>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 030c 	and.w	r3, r3, #12
 8000306:	2b08      	cmp	r3, #8
 8000308:	d1f9      	bne.n	80002fe <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40023800 	.word	0x40023800
 8000318:	40007000 	.word	0x40007000
 800031c:	07405419 	.word	0x07405419
 8000320:	40023c00 	.word	0x40023c00

08000324 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
}
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000334:	e7fe      	b.n	8000334 <HardFault_Handler+0x4>
 8000336:	bf00      	nop

08000338 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>
 800033e:	bf00      	nop

08000340 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000344:	e7fe      	b.n	8000344 <BusFault_Handler+0x4>
 8000346:	bf00      	nop

08000348 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800034c:	e7fe      	b.n	800034c <UsageFault_Handler+0x4>
 800034e:	bf00      	nop

08000350 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
}
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
}
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
}
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000380:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80003c0 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000386:	f000 b804 	b.w	8000392 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 800038c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800038e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000390:	3104      	adds	r1, #4

08000392 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000392:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000396:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000398:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800039a:	f4ff aff6 	bcc.w	800038a <CopyDataInit>
  ldr  r2, =_sbss
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 80003a0:	f000 b803 	b.w	80003aa <LoopFillZerobss>

080003a4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003a4:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003a6:	f842 3b04 	str.w	r3, [r2], #4

080003aa <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 80003ac:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003ae:	f4ff aff9 	bcc.w	80003a4 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003b2:	f7ff ff09 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b6:	f000 fb67 	bl	8000a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ba:	f000 f80f 	bl	80003dc <main>
  bx  lr    
 80003be:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003c4:	08000af4 	.word	0x08000af4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003cc:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	20000020 	.word	0x20000020

080003d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d8:	f7ff bffe 	b.w	80003d8 <ADC_IRQHandler>

080003dc <main>:
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

int
main(int argc, char* argv[]) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
	
	init_I2C(400000, 'B', 0, 1);
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <main+0x34>)
 80003e8:	2142      	movs	r1, #66	; 0x42
 80003ea:	2200      	movs	r2, #0
 80003ec:	2301      	movs	r3, #1
 80003ee:	f000 f811 	bl	8000414 <init_I2C>
	uint8_t data2;
	I2C1_read(0x68, 0x75, 1, &data2);
 80003f2:	f107 0317 	add.w	r3, r7, #23
 80003f6:	2068      	movs	r0, #104	; 0x68
 80003f8:	2175      	movs	r1, #117	; 0x75
 80003fa:	2201      	movs	r2, #1
 80003fc:	f000 fa9c 	bl	8000938 <I2C1_read>
	uint8_t data[14];
	I2C1_read(0x68, 0x3B, 14, data);
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	2068      	movs	r0, #104	; 0x68
 8000406:	213b      	movs	r1, #59	; 0x3b
 8000408:	220e      	movs	r2, #14
 800040a:	f000 fa95 	bl	8000938 <I2C1_read>


	while(1) {
	}
 800040e:	e7fe      	b.n	800040e <main+0x32>
 8000410:	00061a80 	.word	0x00061a80

08000414 <init_I2C>:
		pin_set - The set of two pins being used. Is in the order the set is found
		             on the port. For example, PB6 and PB7, pin_set is 0, and if itoa
					 is PB8 and PB9, then pin_set is 1, and so on.
		channel - The I2C channel. This will correspond to I2C1, I2C2, and I2C3.
*/
void init_I2C(uint32_t freq, char port, uint8_t pin_set, uint8_t channel) {
 8000414:	b480      	push	{r7}
 8000416:	b087      	sub	sp, #28
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	70f9      	strb	r1, [r7, #3]
 800041e:	70ba      	strb	r2, [r7, #2]
 8000420:	707b      	strb	r3, [r7, #1]
	/*
	 * Setup the pins
	 */
	 // If using port B. This has SCL on pins PB6, PB8, and PB10.
	 // SDA is on pins PB7, PB9, and PB11.
	 if(port == 'b' || port == 'B') {
 8000422:	78fb      	ldrb	r3, [r7, #3]
 8000424:	2b62      	cmp	r3, #98	; 0x62
 8000426:	d002      	beq.n	800042e <init_I2C+0x1a>
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	2b42      	cmp	r3, #66	; 0x42
 800042c:	d139      	bne.n	80004a2 <init_I2C+0x8e>
		// If pin_set is outside the range, default to 0.
		if(pin_set < 0 || pin_set > 2)
 800042e:	78bb      	ldrb	r3, [r7, #2]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d901      	bls.n	8000438 <init_I2C+0x24>
			pin_set = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	70bb      	strb	r3, [r7, #2]
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable port clock.
 8000438:	4b8e      	ldr	r3, [pc, #568]	; (8000674 <init_I2C+0x260>)
 800043a:	4a8e      	ldr	r2, [pc, #568]	; (8000674 <init_I2C+0x260>)
 800043c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800043e:	f042 0202 	orr.w	r2, r2, #2
 8000442:	631a      	str	r2, [r3, #48]	; 0x30
		GPIOB->MODER |= (10 << (4*pin_set + 12)); // Set to AF.
 8000444:	4b8c      	ldr	r3, [pc, #560]	; (8000678 <init_I2C+0x264>)
 8000446:	4a8c      	ldr	r2, [pc, #560]	; (8000678 <init_I2C+0x264>)
 8000448:	6811      	ldr	r1, [r2, #0]
 800044a:	78ba      	ldrb	r2, [r7, #2]
 800044c:	3203      	adds	r2, #3
 800044e:	0092      	lsls	r2, r2, #2
 8000450:	200a      	movs	r0, #10
 8000452:	fa00 f202 	lsl.w	r2, r0, r2
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
		GPIOB->OTYPER |= (3 << (2*pin_set + 6)); // Set to open drain.
 800045a:	4b87      	ldr	r3, [pc, #540]	; (8000678 <init_I2C+0x264>)
 800045c:	4a86      	ldr	r2, [pc, #536]	; (8000678 <init_I2C+0x264>)
 800045e:	6851      	ldr	r1, [r2, #4]
 8000460:	78ba      	ldrb	r2, [r7, #2]
 8000462:	3203      	adds	r2, #3
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	2003      	movs	r0, #3
 8000468:	fa00 f202 	lsl.w	r2, r0, r2
 800046c:	430a      	orrs	r2, r1
 800046e:	605a      	str	r2, [r3, #4]
		uint32_t temp = GPIOB->MODER;
 8000470:	4b81      	ldr	r3, [pc, #516]	; (8000678 <init_I2C+0x264>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	60bb      	str	r3, [r7, #8]
		//GPIOB->PUPDR |= (5 << (4*pin_set + 8)); // Turn on pull-up resistor
		// Set AF to AF4 (I2C)
		if(pin_set) {
 8000476:	78bb      	ldrb	r3, [r7, #2]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00b      	beq.n	8000494 <init_I2C+0x80>
			GPIOB->AFR[1] |= (68 << (pin_set*8 - 8));
 800047c:	4b7e      	ldr	r3, [pc, #504]	; (8000678 <init_I2C+0x264>)
 800047e:	4a7e      	ldr	r2, [pc, #504]	; (8000678 <init_I2C+0x264>)
 8000480:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000482:	78ba      	ldrb	r2, [r7, #2]
 8000484:	3a01      	subs	r2, #1
 8000486:	00d2      	lsls	r2, r2, #3
 8000488:	2044      	movs	r0, #68	; 0x44
 800048a:	fa00 f202 	lsl.w	r2, r0, r2
 800048e:	430a      	orrs	r2, r1
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
	/*
	 * Setup the pins
	 */
	 // If using port B. This has SCL on pins PB6, PB8, and PB10.
	 // SDA is on pins PB7, PB9, and PB11.
	 if(port == 'b' || port == 'B') {
 8000492:	e07a      	b.n	800058a <init_I2C+0x176>
		// Set AF to AF4 (I2C)
		if(pin_set) {
			GPIOB->AFR[1] |= (68 << (pin_set*8 - 8));
		}
		else {
			GPIOB->AFR[0] |= (4 << 24) | (4 << 28);
 8000494:	4b78      	ldr	r3, [pc, #480]	; (8000678 <init_I2C+0x264>)
 8000496:	4a78      	ldr	r2, [pc, #480]	; (8000678 <init_I2C+0x264>)
 8000498:	6a12      	ldr	r2, [r2, #32]
 800049a:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
 800049e:	621a      	str	r2, [r3, #32]
	/*
	 * Setup the pins
	 */
	 // If using port B. This has SCL on pins PB6, PB8, and PB10.
	 // SDA is on pins PB7, PB9, and PB11.
	 if(port == 'b' || port == 'B') {
 80004a0:	e073      	b.n	800058a <init_I2C+0x176>
		else {
			GPIOB->AFR[0] |= (4 << 24) | (4 << 28);
		}
	 }
	 // Use port F pins PF0(SDA) and PF1(SCL)
	 else if(port == 'f' || port == 'F') {
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	2b66      	cmp	r3, #102	; 0x66
 80004a6:	d002      	beq.n	80004ae <init_I2C+0x9a>
 80004a8:	78fb      	ldrb	r3, [r7, #3]
 80004aa:	2b46      	cmp	r3, #70	; 0x46
 80004ac:	d123      	bne.n	80004f6 <init_I2C+0xe2>
		if(pin_set != 0)
 80004ae:	78bb      	ldrb	r3, [r7, #2]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <init_I2C+0xa4>
			pin_set = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	70bb      	strb	r3, [r7, #2]
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; // Enable port clock.
 80004b8:	4b6e      	ldr	r3, [pc, #440]	; (8000674 <init_I2C+0x260>)
 80004ba:	4a6e      	ldr	r2, [pc, #440]	; (8000674 <init_I2C+0x260>)
 80004bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80004be:	f042 0220 	orr.w	r2, r2, #32
 80004c2:	631a      	str	r2, [r3, #48]	; 0x30
		GPIOF->MODER |= (10 << 0); // Set to AF.
 80004c4:	4b6d      	ldr	r3, [pc, #436]	; (800067c <init_I2C+0x268>)
 80004c6:	4a6d      	ldr	r2, [pc, #436]	; (800067c <init_I2C+0x268>)
 80004c8:	6812      	ldr	r2, [r2, #0]
 80004ca:	f042 020a 	orr.w	r2, r2, #10
 80004ce:	601a      	str	r2, [r3, #0]
		GPIOF->OTYPER |= (3 << 0); // Set to open drain.
 80004d0:	4b6a      	ldr	r3, [pc, #424]	; (800067c <init_I2C+0x268>)
 80004d2:	4a6a      	ldr	r2, [pc, #424]	; (800067c <init_I2C+0x268>)
 80004d4:	6852      	ldr	r2, [r2, #4]
 80004d6:	f042 0203 	orr.w	r2, r2, #3
 80004da:	605a      	str	r2, [r3, #4]
		GPIOF->PUPDR |= (5 << 0); // Turn on pull-up resistor
 80004dc:	4b67      	ldr	r3, [pc, #412]	; (800067c <init_I2C+0x268>)
 80004de:	4a67      	ldr	r2, [pc, #412]	; (800067c <init_I2C+0x268>)
 80004e0:	68d2      	ldr	r2, [r2, #12]
 80004e2:	f042 0205 	orr.w	r2, r2, #5
 80004e6:	60da      	str	r2, [r3, #12]
		// Set AF to AF4 (I2C)
		GPIOF->AFR[0] |= (4 << 0) | (4 << 4);
 80004e8:	4b64      	ldr	r3, [pc, #400]	; (800067c <init_I2C+0x268>)
 80004ea:	4a64      	ldr	r2, [pc, #400]	; (800067c <init_I2C+0x268>)
 80004ec:	6a12      	ldr	r2, [r2, #32]
 80004ee:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 80004f2:	621a      	str	r2, [r3, #32]
 80004f4:	e049      	b.n	800058a <init_I2C+0x176>
	 }
	 // Use port H. Uses SCL pins PH4 and PH7, and SDA PH5 and PH8
	 else if(port == 'h' || port == 'H') {
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	2b68      	cmp	r3, #104	; 0x68
 80004fa:	d002      	beq.n	8000502 <init_I2C+0xee>
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b48      	cmp	r3, #72	; 0x48
 8000500:	d143      	bne.n	800058a <init_I2C+0x176>
		 if(pin_set < 0 || pin_set > 1)
 8000502:	78bb      	ldrb	r3, [r7, #2]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d901      	bls.n	800050c <init_I2C+0xf8>
			 pin_set = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	70bb      	strb	r3, [r7, #2]
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; // Enable port clock.
 800050c:	4b59      	ldr	r3, [pc, #356]	; (8000674 <init_I2C+0x260>)
 800050e:	4a59      	ldr	r2, [pc, #356]	; (8000674 <init_I2C+0x260>)
 8000510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000516:	631a      	str	r2, [r3, #48]	; 0x30
		GPIOH->MODER |= (10 << (6*pin_set + 8)); // Set to AF.
 8000518:	4959      	ldr	r1, [pc, #356]	; (8000680 <init_I2C+0x26c>)
 800051a:	4b59      	ldr	r3, [pc, #356]	; (8000680 <init_I2C+0x26c>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	78ba      	ldrb	r2, [r7, #2]
 8000520:	4613      	mov	r3, r2
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4413      	add	r3, r2
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	3308      	adds	r3, #8
 800052a:	220a      	movs	r2, #10
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	4303      	orrs	r3, r0
 8000532:	600b      	str	r3, [r1, #0]
		GPIOH->OTYPER |= (3 << (3*pin_set + 4)); // Set to open drain.
 8000534:	4952      	ldr	r1, [pc, #328]	; (8000680 <init_I2C+0x26c>)
 8000536:	4b52      	ldr	r3, [pc, #328]	; (8000680 <init_I2C+0x26c>)
 8000538:	6858      	ldr	r0, [r3, #4]
 800053a:	78ba      	ldrb	r2, [r7, #2]
 800053c:	4613      	mov	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4413      	add	r3, r2
 8000542:	3304      	adds	r3, #4
 8000544:	2203      	movs	r2, #3
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	4303      	orrs	r3, r0
 800054c:	604b      	str	r3, [r1, #4]
		GPIOH->PUPDR |= (5 << (6*pin_set + 8)); // Turn on pull-up resistor
 800054e:	494c      	ldr	r1, [pc, #304]	; (8000680 <init_I2C+0x26c>)
 8000550:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <init_I2C+0x26c>)
 8000552:	68d8      	ldr	r0, [r3, #12]
 8000554:	78ba      	ldrb	r2, [r7, #2]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	3308      	adds	r3, #8
 8000560:	2205      	movs	r2, #5
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	4303      	orrs	r3, r0
 8000568:	60cb      	str	r3, [r1, #12]
		// Set AF to AF4 (I2C)
		if(pin_set) {
 800056a:	78bb      	ldrb	r3, [r7, #2]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d006      	beq.n	800057e <init_I2C+0x16a>
			GPIOH->AFR[0] |= (4 << 24) | (4 << 28);
 8000570:	4b43      	ldr	r3, [pc, #268]	; (8000680 <init_I2C+0x26c>)
 8000572:	4a43      	ldr	r2, [pc, #268]	; (8000680 <init_I2C+0x26c>)
 8000574:	6a12      	ldr	r2, [r2, #32]
 8000576:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
 800057a:	621a      	str	r2, [r3, #32]
 800057c:	e005      	b.n	800058a <init_I2C+0x176>
		}
		else {
			GPIOH->AFR[0] |= (4 << 16) | (4 << 20);
 800057e:	4b40      	ldr	r3, [pc, #256]	; (8000680 <init_I2C+0x26c>)
 8000580:	4a3f      	ldr	r2, [pc, #252]	; (8000680 <init_I2C+0x26c>)
 8000582:	6a12      	ldr	r2, [r2, #32]
 8000584:	f442 0288 	orr.w	r2, r2, #4456448	; 0x440000
 8000588:	621a      	str	r2, [r3, #32]
	 
	 /*
	  * Setup RCC clock, and SCL in CR2, CCR, and TRISE registers.
	  */
	// Make sure that the desired frequency is within the range.
	if(freq > 400000)
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <init_I2C+0x270>)
 800058e:	429a      	cmp	r2, r3
 8000590:	d902      	bls.n	8000598 <init_I2C+0x184>
		freq = 400000;
 8000592:	4b3c      	ldr	r3, [pc, #240]	; (8000684 <init_I2C+0x270>)
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e007      	b.n	80005a8 <init_I2C+0x194>
	else if(freq < 20000)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800059e:	429a      	cmp	r2, r3
 80005a0:	d802      	bhi.n	80005a8 <init_I2C+0x194>
		freq = 20000;
 80005a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005a6:	607b      	str	r3, [r7, #4]
	// If outside the range, default to channel 1.
	if(channel < 1 || channel > 3)
 80005a8:	787b      	ldrb	r3, [r7, #1]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <init_I2C+0x1a0>
 80005ae:	787b      	ldrb	r3, [r7, #1]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d901      	bls.n	80005b8 <init_I2C+0x1a4>
		channel = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	707b      	strb	r3, [r7, #1]
	
	if(channel == 1) {
 80005b8:	787b      	ldrb	r3, [r7, #1]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	f040 8094 	bne.w	80006e8 <init_I2C+0x2d4>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <init_I2C+0x260>)
 80005c2:	4a2c      	ldr	r2, [pc, #176]	; (8000674 <init_I2C+0x260>)
 80005c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80005ca:	641a      	str	r2, [r3, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <init_I2C+0x260>)
 80005ce:	4a29      	ldr	r2, [pc, #164]	; (8000674 <init_I2C+0x260>)
 80005d0:	6a12      	ldr	r2, [r2, #32]
 80005d2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80005d6:	621a      	str	r2, [r3, #32]
		uint32_t i;
		for(i=0; i < 10000000;i++) {;}
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e002      	b.n	80005e4 <init_I2C+0x1d0>
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <init_I2C+0x274>)
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d9f8      	bls.n	80005de <init_I2C+0x1ca>
		RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <init_I2C+0x260>)
 80005ee:	4a21      	ldr	r2, [pc, #132]	; (8000674 <init_I2C+0x260>)
 80005f0:	6a12      	ldr	r2, [r2, #32]
 80005f2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80005f6:	621a      	str	r2, [r3, #32]
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <init_I2C+0x260>)
 80005fa:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <init_I2C+0x260>)
 80005fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005fe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000602:	641a      	str	r2, [r3, #64]	; 0x40
		
		//Set peripheral clock to 20MHz.
		//I2C1->CR2 |= (20 << 0);
		I2C1->CR2 |= (20 << 0);
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <init_I2C+0x278>)
 8000606:	4a21      	ldr	r2, [pc, #132]	; (800068c <init_I2C+0x278>)
 8000608:	8892      	ldrh	r2, [r2, #4]
 800060a:	b292      	uxth	r2, r2
 800060c:	f042 0214 	orr.w	r2, r2, #20
 8000610:	b292      	uxth	r2, r2
 8000612:	809a      	strh	r2, [r3, #4]
		// t_pclk = 1/(20e6)
		// t_clk = 1/freq 
		// t_high = (1/3)*t_clk = CCR*t_pclk
		// t_low = (2/3)*t_clk 
		// CCR = t_clk/(3*t_pclk)
		if(freq > 100000) {
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <init_I2C+0x27c>)
 8000618:	429a      	cmp	r2, r3
 800061a:	d93d      	bls.n	8000698 <init_I2C+0x284>
			I2C1->CCR |= (1 << 15); // Turn on fast mode.
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <init_I2C+0x278>)
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <init_I2C+0x278>)
 8000620:	8b9b      	ldrh	r3, [r3, #28]
 8000622:	b29b      	uxth	r3, r3
 8000624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800062c:	b29b      	uxth	r3, r3
 800062e:	8393      	strh	r3, [r2, #28]
			I2C1->CCR |= (1 << 14); // Set duty cycle to 16/9.
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <init_I2C+0x278>)
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <init_I2C+0x278>)
 8000634:	8b92      	ldrh	r2, [r2, #28]
 8000636:	b292      	uxth	r2, r2
 8000638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800063c:	b292      	uxth	r2, r2
 800063e:	839a      	strh	r2, [r3, #28]
			I2C1->CCR |= (uint32_t)((20000000/(48*freq))); // Calculate the high and low times.
 8000640:	4912      	ldr	r1, [pc, #72]	; (800068c <init_I2C+0x278>)
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <init_I2C+0x278>)
 8000644:	8b9b      	ldrh	r3, [r3, #28]
 8000646:	b298      	uxth	r0, r3
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <init_I2C+0x280>)
 8000654:	fbb2 f3f3 	udiv	r3, r2, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	4303      	orrs	r3, r0
 800065c:	b29b      	uxth	r3, r3
 800065e:	838b      	strh	r3, [r1, #28]
			I2C1->TRISE |= 4;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <init_I2C+0x278>)
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <init_I2C+0x278>)
 8000664:	8c12      	ldrh	r2, [r2, #32]
 8000666:	b292      	uxth	r2, r2
 8000668:	f042 0204 	orr.w	r2, r2, #4
 800066c:	b292      	uxth	r2, r2
 800066e:	841a      	strh	r2, [r3, #32]
 8000670:	e02e      	b.n	80006d0 <init_I2C+0x2bc>
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40020400 	.word	0x40020400
 800067c:	40021400 	.word	0x40021400
 8000680:	40021c00 	.word	0x40021c00
 8000684:	00061a80 	.word	0x00061a80
 8000688:	0098967f 	.word	0x0098967f
 800068c:	40005400 	.word	0x40005400
 8000690:	000186a0 	.word	0x000186a0
 8000694:	01312d00 	.word	0x01312d00
		else {
			// t_pclk = 1/(20e6)
			// t_clk = 1/freq
			// t_high = t_clk/2 = CCR*t_pclk
			// CCR = t_clk/(2*t_pclk)
			I2C1->CCR &= ~(1 << 15); // Turn on slow mode.
 8000698:	4b84      	ldr	r3, [pc, #528]	; (80008ac <init_I2C+0x498>)
 800069a:	4a84      	ldr	r2, [pc, #528]	; (80008ac <init_I2C+0x498>)
 800069c:	8b92      	ldrh	r2, [r2, #28]
 800069e:	b292      	uxth	r2, r2
 80006a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80006a4:	b292      	uxth	r2, r2
 80006a6:	839a      	strh	r2, [r3, #28]
			I2C1->CCR |= (uint32_t)(20000000/(freq));
 80006a8:	4b80      	ldr	r3, [pc, #512]	; (80008ac <init_I2C+0x498>)
 80006aa:	4a80      	ldr	r2, [pc, #512]	; (80008ac <init_I2C+0x498>)
 80006ac:	8b92      	ldrh	r2, [r2, #28]
 80006ae:	b291      	uxth	r1, r2
 80006b0:	487f      	ldr	r0, [pc, #508]	; (80008b0 <init_I2C+0x49c>)
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	fbb0 f2f2 	udiv	r2, r0, r2
 80006b8:	b292      	uxth	r2, r2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	b292      	uxth	r2, r2
 80006be:	839a      	strh	r2, [r3, #28]
			I2C1->TRISE |= (21 << 0);
 80006c0:	4b7a      	ldr	r3, [pc, #488]	; (80008ac <init_I2C+0x498>)
 80006c2:	4a7a      	ldr	r2, [pc, #488]	; (80008ac <init_I2C+0x498>)
 80006c4:	8c12      	ldrh	r2, [r2, #32]
 80006c6:	b292      	uxth	r2, r2
 80006c8:	f042 0215 	orr.w	r2, r2, #21
 80006cc:	b292      	uxth	r2, r2
 80006ce:	841a      	strh	r2, [r3, #32]
			//I2C1->CCR |= (0x28 << 0);
			//I2C1->TRISE |= (9 << 0);
		}
		
		// Enable the I2C1 peripheral.
		I2C1->CR1 |= (1 << 0);
 80006d0:	4b76      	ldr	r3, [pc, #472]	; (80008ac <init_I2C+0x498>)
 80006d2:	4a76      	ldr	r2, [pc, #472]	; (80008ac <init_I2C+0x498>)
 80006d4:	8812      	ldrh	r2, [r2, #0]
 80006d6:	b292      	uxth	r2, r2
 80006d8:	f042 0201 	orr.w	r2, r2, #1
 80006dc:	b292      	uxth	r2, r2
 80006de:	801a      	strh	r2, [r3, #0]
		I2C1_started = 1;
 80006e0:	4b74      	ldr	r3, [pc, #464]	; (80008b4 <init_I2C+0x4a0>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
 80006e6:	e11a      	b.n	800091e <init_I2C+0x50a>
	}
	else if(channel == 2) {
 80006e8:	787b      	ldrb	r3, [r7, #1]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	f040 8081 	bne.w	80007f2 <init_I2C+0x3de>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80006f0:	4b71      	ldr	r3, [pc, #452]	; (80008b8 <init_I2C+0x4a4>)
 80006f2:	4a71      	ldr	r2, [pc, #452]	; (80008b8 <init_I2C+0x4a4>)
 80006f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006f6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_I2C2RST;
 80006fc:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <init_I2C+0x4a4>)
 80006fe:	4a6e      	ldr	r2, [pc, #440]	; (80008b8 <init_I2C+0x4a4>)
 8000700:	6a12      	ldr	r2, [r2, #32]
 8000702:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000706:	621a      	str	r2, [r3, #32]
		uint32_t i;
		for(i=0; i < 10000000;i++) {;}
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	e002      	b.n	8000714 <init_I2C+0x300>
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	3301      	adds	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	4b69      	ldr	r3, [pc, #420]	; (80008bc <init_I2C+0x4a8>)
 8000718:	429a      	cmp	r2, r3
 800071a:	d9f8      	bls.n	800070e <init_I2C+0x2fa>
		RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C2RST;
 800071c:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <init_I2C+0x4a4>)
 800071e:	4a66      	ldr	r2, [pc, #408]	; (80008b8 <init_I2C+0x4a4>)
 8000720:	6a12      	ldr	r2, [r2, #32]
 8000722:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000726:	621a      	str	r2, [r3, #32]
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000728:	4b63      	ldr	r3, [pc, #396]	; (80008b8 <init_I2C+0x4a4>)
 800072a:	4a63      	ldr	r2, [pc, #396]	; (80008b8 <init_I2C+0x4a4>)
 800072c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800072e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000732:	641a      	str	r2, [r3, #64]	; 0x40
		
		//Set peripheral clock to 20MHz.
		//I2C2->CR2 |= (20 << 0);
		I2C2->CR2 |= (20 << 0);
 8000734:	4b62      	ldr	r3, [pc, #392]	; (80008c0 <init_I2C+0x4ac>)
 8000736:	4a62      	ldr	r2, [pc, #392]	; (80008c0 <init_I2C+0x4ac>)
 8000738:	8892      	ldrh	r2, [r2, #4]
 800073a:	b292      	uxth	r2, r2
 800073c:	f042 0214 	orr.w	r2, r2, #20
 8000740:	b292      	uxth	r2, r2
 8000742:	809a      	strh	r2, [r3, #4]
		// t_pclk = 1/(20e6)
		// t_clk = 1/freq 
		// t_high = (1/3)*t_clk = CCR*t_pclk
		// t_low = (2/3)*t_clk 
		// CCR = t_clk/(3*t_pclk)
		if(freq > 100000) {
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4b5f      	ldr	r3, [pc, #380]	; (80008c4 <init_I2C+0x4b0>)
 8000748:	429a      	cmp	r2, r3
 800074a:	d92a      	bls.n	80007a2 <init_I2C+0x38e>
			I2C2->CCR |= (1 << 15); // Turn on fast mode.
 800074c:	4a5c      	ldr	r2, [pc, #368]	; (80008c0 <init_I2C+0x4ac>)
 800074e:	4b5c      	ldr	r3, [pc, #368]	; (80008c0 <init_I2C+0x4ac>)
 8000750:	8b9b      	ldrh	r3, [r3, #28]
 8000752:	b29b      	uxth	r3, r3
 8000754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800075c:	b29b      	uxth	r3, r3
 800075e:	8393      	strh	r3, [r2, #28]
			I2C2->CCR |= (1 << 14); // Set duty cycle to 16/9.
 8000760:	4b57      	ldr	r3, [pc, #348]	; (80008c0 <init_I2C+0x4ac>)
 8000762:	4a57      	ldr	r2, [pc, #348]	; (80008c0 <init_I2C+0x4ac>)
 8000764:	8b92      	ldrh	r2, [r2, #28]
 8000766:	b292      	uxth	r2, r2
 8000768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800076c:	b292      	uxth	r2, r2
 800076e:	839a      	strh	r2, [r3, #28]
			I2C2->CCR |= (uint32_t)((20000000/(12*freq))); // Calculate the high and low times.
 8000770:	4953      	ldr	r1, [pc, #332]	; (80008c0 <init_I2C+0x4ac>)
 8000772:	4b53      	ldr	r3, [pc, #332]	; (80008c0 <init_I2C+0x4ac>)
 8000774:	8b9b      	ldrh	r3, [r3, #28]
 8000776:	b298      	uxth	r0, r3
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4a4b      	ldr	r2, [pc, #300]	; (80008b0 <init_I2C+0x49c>)
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	b29b      	uxth	r3, r3
 800078a:	4303      	orrs	r3, r0
 800078c:	b29b      	uxth	r3, r3
 800078e:	838b      	strh	r3, [r1, #28]
			I2C2->TRISE |= 4;
 8000790:	4b4b      	ldr	r3, [pc, #300]	; (80008c0 <init_I2C+0x4ac>)
 8000792:	4a4b      	ldr	r2, [pc, #300]	; (80008c0 <init_I2C+0x4ac>)
 8000794:	8c12      	ldrh	r2, [r2, #32]
 8000796:	b292      	uxth	r2, r2
 8000798:	f042 0204 	orr.w	r2, r2, #4
 800079c:	b292      	uxth	r2, r2
 800079e:	841a      	strh	r2, [r3, #32]
 80007a0:	e01b      	b.n	80007da <init_I2C+0x3c6>
		else {
			// t_pclk = 1/(20e6)
			// t_clk = 1/freq
			// t_high = t_clk/2 = CCR*t_pclk
			// CCR = t_clk/(2*t_pclk)
			I2C2->CCR &= ~(1 << 15); // Turn on slow mode.
 80007a2:	4b47      	ldr	r3, [pc, #284]	; (80008c0 <init_I2C+0x4ac>)
 80007a4:	4a46      	ldr	r2, [pc, #280]	; (80008c0 <init_I2C+0x4ac>)
 80007a6:	8b92      	ldrh	r2, [r2, #28]
 80007a8:	b292      	uxth	r2, r2
 80007aa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80007ae:	b292      	uxth	r2, r2
 80007b0:	839a      	strh	r2, [r3, #28]
			I2C2->CCR |= (uint32_t)(20000000/(freq));
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <init_I2C+0x4ac>)
 80007b4:	4a42      	ldr	r2, [pc, #264]	; (80008c0 <init_I2C+0x4ac>)
 80007b6:	8b92      	ldrh	r2, [r2, #28]
 80007b8:	b291      	uxth	r1, r2
 80007ba:	483d      	ldr	r0, [pc, #244]	; (80008b0 <init_I2C+0x49c>)
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	fbb0 f2f2 	udiv	r2, r0, r2
 80007c2:	b292      	uxth	r2, r2
 80007c4:	430a      	orrs	r2, r1
 80007c6:	b292      	uxth	r2, r2
 80007c8:	839a      	strh	r2, [r3, #28]
			I2C2->TRISE |= (21 << 0);
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <init_I2C+0x4ac>)
 80007cc:	4a3c      	ldr	r2, [pc, #240]	; (80008c0 <init_I2C+0x4ac>)
 80007ce:	8c12      	ldrh	r2, [r2, #32]
 80007d0:	b292      	uxth	r2, r2
 80007d2:	f042 0215 	orr.w	r2, r2, #21
 80007d6:	b292      	uxth	r2, r2
 80007d8:	841a      	strh	r2, [r3, #32]
			//I2C2->CCR |= (0x28 << 0);
			//I2C2->TRISE |= (9 << 0);
		}
		
		// Enable the I2C2 peripheral.
		I2C2->CR1 |= (1 << 0);
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <init_I2C+0x4ac>)
 80007dc:	4a38      	ldr	r2, [pc, #224]	; (80008c0 <init_I2C+0x4ac>)
 80007de:	8812      	ldrh	r2, [r2, #0]
 80007e0:	b292      	uxth	r2, r2
 80007e2:	f042 0201 	orr.w	r2, r2, #1
 80007e6:	b292      	uxth	r2, r2
 80007e8:	801a      	strh	r2, [r3, #0]
		I2C2_started = 1;
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <init_I2C+0x4b4>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e095      	b.n	800091e <init_I2C+0x50a>
	}
	else if(channel == 3) {
 80007f2:	787b      	ldrb	r3, [r7, #1]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	f040 8092 	bne.w	800091e <init_I2C+0x50a>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <init_I2C+0x4a4>)
 80007fc:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <init_I2C+0x4a4>)
 80007fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000800:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000804:	641a      	str	r2, [r3, #64]	; 0x40
		RCC->APB1RSTR |= RCC_APB1RSTR_I2C3RST;
 8000806:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <init_I2C+0x4a4>)
 8000808:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <init_I2C+0x4a4>)
 800080a:	6a12      	ldr	r2, [r2, #32]
 800080c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000810:	621a      	str	r2, [r3, #32]
		uint32_t i;
		for(i=0; i < 10000000;i++) {;}
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	e002      	b.n	800081e <init_I2C+0x40a>
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <init_I2C+0x4a8>)
 8000822:	429a      	cmp	r2, r3
 8000824:	d9f8      	bls.n	8000818 <init_I2C+0x404>
		RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C3RST;
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <init_I2C+0x4a4>)
 8000828:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <init_I2C+0x4a4>)
 800082a:	6a12      	ldr	r2, [r2, #32]
 800082c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000830:	621a      	str	r2, [r3, #32]
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <init_I2C+0x4a4>)
 8000834:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <init_I2C+0x4a4>)
 8000836:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000838:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800083c:	641a      	str	r2, [r3, #64]	; 0x40
		
		//Set peripheral clock to 20MHz.
		//I2C3->CR2 |= (20 << 0);
		I2C3->CR2 |= (20 << 0);
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <init_I2C+0x4b8>)
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <init_I2C+0x4b8>)
 8000842:	8892      	ldrh	r2, [r2, #4]
 8000844:	b292      	uxth	r2, r2
 8000846:	f042 0214 	orr.w	r2, r2, #20
 800084a:	b292      	uxth	r2, r2
 800084c:	809a      	strh	r2, [r3, #4]
		// t_pclk = 1/(20e6)
		// t_clk = 1/freq 
		// t_high = (1/3)*t_clk = CCR*t_pclk
		// t_low = (2/3)*t_clk 
		// CCR = t_clk/(3*t_pclk)
		if(freq > 100000) {
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <init_I2C+0x4b0>)
 8000852:	429a      	cmp	r2, r3
 8000854:	d93c      	bls.n	80008d0 <init_I2C+0x4bc>
			I2C3->CCR |= (1 << 15); // Turn on fast mode.
 8000856:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <init_I2C+0x4b8>)
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <init_I2C+0x4b8>)
 800085a:	8b9b      	ldrh	r3, [r3, #28]
 800085c:	b29b      	uxth	r3, r3
 800085e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000866:	b29b      	uxth	r3, r3
 8000868:	8393      	strh	r3, [r2, #28]
			I2C3->CCR |= (1 << 14); // Set duty cycle to 16/9.
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <init_I2C+0x4b8>)
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <init_I2C+0x4b8>)
 800086e:	8b92      	ldrh	r2, [r2, #28]
 8000870:	b292      	uxth	r2, r2
 8000872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000876:	b292      	uxth	r2, r2
 8000878:	839a      	strh	r2, [r3, #28]
			I2C3->CCR |= (uint32_t)((20000000/(12*freq))); // Calculate the high and low times.
 800087a:	4914      	ldr	r1, [pc, #80]	; (80008cc <init_I2C+0x4b8>)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <init_I2C+0x4b8>)
 800087e:	8b9b      	ldrh	r3, [r3, #28]
 8000880:	b298      	uxth	r0, r3
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <init_I2C+0x49c>)
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	4303      	orrs	r3, r0
 8000896:	b29b      	uxth	r3, r3
 8000898:	838b      	strh	r3, [r1, #28]
			I2C3->TRISE |= 4;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <init_I2C+0x4b8>)
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <init_I2C+0x4b8>)
 800089e:	8c12      	ldrh	r2, [r2, #32]
 80008a0:	b292      	uxth	r2, r2
 80008a2:	f042 0204 	orr.w	r2, r2, #4
 80008a6:	b292      	uxth	r2, r2
 80008a8:	841a      	strh	r2, [r3, #32]
 80008aa:	e02d      	b.n	8000908 <init_I2C+0x4f4>
 80008ac:	40005400 	.word	0x40005400
 80008b0:	01312d00 	.word	0x01312d00
 80008b4:	2000001d 	.word	0x2000001d
 80008b8:	40023800 	.word	0x40023800
 80008bc:	0098967f 	.word	0x0098967f
 80008c0:	40005800 	.word	0x40005800
 80008c4:	000186a0 	.word	0x000186a0
 80008c8:	2000001c 	.word	0x2000001c
 80008cc:	40005c00 	.word	0x40005c00
		else {
			// t_pclk = 1/(20e6)
			// t_clk = 1/freq
			// t_high = t_clk/2 = CCR*t_pclk
			// CCR = t_clk/(2*t_pclk)
			I2C3->CCR &= ~(1 << 15); // Turn on slow mode.
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <init_I2C+0x518>)
 80008d2:	4a16      	ldr	r2, [pc, #88]	; (800092c <init_I2C+0x518>)
 80008d4:	8b92      	ldrh	r2, [r2, #28]
 80008d6:	b292      	uxth	r2, r2
 80008d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80008dc:	b292      	uxth	r2, r2
 80008de:	839a      	strh	r2, [r3, #28]
			I2C3->CCR |= (uint32_t)(20000000/(freq));
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <init_I2C+0x518>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <init_I2C+0x518>)
 80008e4:	8b92      	ldrh	r2, [r2, #28]
 80008e6:	b291      	uxth	r1, r2
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <init_I2C+0x51c>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	fbb0 f2f2 	udiv	r2, r0, r2
 80008f0:	b292      	uxth	r2, r2
 80008f2:	430a      	orrs	r2, r1
 80008f4:	b292      	uxth	r2, r2
 80008f6:	839a      	strh	r2, [r3, #28]
			I2C3->TRISE |= (21 << 0);
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <init_I2C+0x518>)
 80008fa:	4a0c      	ldr	r2, [pc, #48]	; (800092c <init_I2C+0x518>)
 80008fc:	8c12      	ldrh	r2, [r2, #32]
 80008fe:	b292      	uxth	r2, r2
 8000900:	f042 0215 	orr.w	r2, r2, #21
 8000904:	b292      	uxth	r2, r2
 8000906:	841a      	strh	r2, [r3, #32]
			//I2C3->CCR |= (0x28 << 0);
			//I2C3->TRISE |= (9 << 0);
		}
		
		// Enable the I2C3 peripheral.
		I2C3->CR1 |= (1 << 0);
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <init_I2C+0x518>)
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <init_I2C+0x518>)
 800090c:	8812      	ldrh	r2, [r2, #0]
 800090e:	b292      	uxth	r2, r2
 8000910:	f042 0201 	orr.w	r2, r2, #1
 8000914:	b292      	uxth	r2, r2
 8000916:	801a      	strh	r2, [r3, #0]
		I2C3_started = 1;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <init_I2C+0x520>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
	}
	
	return;
 800091e:	bf00      	nop
}
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40005c00 	.word	0x40005c00
 8000930:	01312d00 	.word	0x01312d00
 8000934:	2000001e 	.word	0x2000001e

08000938 <I2C1_read>:
		*data - Pointer to the data. Can be a singly byte of an array. This is the data being returned
		
	Outputs:
		Returns data in the pinter *data.
*/
void I2C1_read(uint8_t slave_add, uint8_t source_reg, uint8_t num_bytes, uint8_t *data) {
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	460b      	mov	r3, r1
 8000946:	71bb      	strb	r3, [r7, #6]
 8000948:	4613      	mov	r3, r2
 800094a:	717b      	strb	r3, [r7, #5]
	if(I2C1_started) {
 800094c:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <I2C1_read+0x148>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 808f 	beq.w	8000a74 <I2C1_read+0x13c>
		I2C1->CR1 |= (1 << 8); // Set start condition.
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <I2C1_read+0x14c>)
 8000958:	4a4a      	ldr	r2, [pc, #296]	; (8000a84 <I2C1_read+0x14c>)
 800095a:	8812      	ldrh	r2, [r2, #0]
 800095c:	b292      	uxth	r2, r2
 800095e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000962:	b292      	uxth	r2, r2
 8000964:	801a      	strh	r2, [r3, #0]
		while((I2C1->SR1 & I2C_SR1_SB) == 0) {;} // Wait until start condition is set.
 8000966:	bf00      	nop
 8000968:	4b46      	ldr	r3, [pc, #280]	; (8000a84 <I2C1_read+0x14c>)
 800096a:	8a9b      	ldrh	r3, [r3, #20]
 800096c:	b29b      	uxth	r3, r3
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f8      	beq.n	8000968 <I2C1_read+0x30>
		I2C1->DR = (uint8_t)((slave_add << 1) & ~(1 << 0)); // Write slave address and reset read/write bit.
 8000976:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <I2C1_read+0x14c>)
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	0052      	lsls	r2, r2, #1
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000982:	b292      	uxth	r2, r2
 8000984:	821a      	strh	r2, [r3, #16]
		while((I2C1->SR1 & I2C_SR1_ADDR) == 0) {;} // Wait until the address is sent
 8000986:	bf00      	nop
 8000988:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <I2C1_read+0x14c>)
 800098a:	8a9b      	ldrh	r3, [r3, #20]
 800098c:	b29b      	uxth	r3, r3
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f8      	beq.n	8000988 <I2C1_read+0x50>
		uint32_t temp = I2C1->SR2; // Need to read from SR2 to continue.
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <I2C1_read+0x14c>)
 8000998:	8b1b      	ldrh	r3, [r3, #24]
 800099a:	b29b      	uxth	r3, r3
 800099c:	60fb      	str	r3, [r7, #12]
		I2C1->DR = (uint8_t)source_reg; // Set destination register address.
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <I2C1_read+0x14c>)
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	b292      	uxth	r2, r2
 80009a4:	821a      	strh	r2, [r3, #16]
		while((I2C1->SR1 & I2C_SR1_TXE) == 0) {;} // Wait until byte transmits
 80009a6:	bf00      	nop
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <I2C1_read+0x14c>)
 80009aa:	8a9b      	ldrh	r3, [r3, #20]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f8      	beq.n	80009a8 <I2C1_read+0x70>
		I2C1->CR1 |= I2C_CR1_START; // RESTART the transmission.
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <I2C1_read+0x14c>)
 80009b8:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <I2C1_read+0x14c>)
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	b292      	uxth	r2, r2
 80009be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009c2:	b292      	uxth	r2, r2
 80009c4:	801a      	strh	r2, [r3, #0]
		while((I2C1->SR1 & I2C_SR1_SB) == 0) {;}
 80009c6:	bf00      	nop
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <I2C1_read+0x14c>)
 80009ca:	8a9b      	ldrh	r3, [r3, #20]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f8      	beq.n	80009c8 <I2C1_read+0x90>
		I2C1->DR = (uint8_t)((slave_add << 1) | (1 << 0)); // Re-send slave address.
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <I2C1_read+0x14c>)
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	0052      	lsls	r2, r2, #1
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	821a      	strh	r2, [r3, #16]
		while((I2C1->SR1 & I2C_SR1_ADDR)==0) {;} // Wait for start condition to be valid
 80009e8:	bf00      	nop
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <I2C1_read+0x14c>)
 80009ec:	8a9b      	ldrh	r3, [r3, #20]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f8      	beq.n	80009ea <I2C1_read+0xb2>
		temp = I2C1->SR2; // Read from SR2 to continue.
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <I2C1_read+0x14c>)
 80009fa:	8b1b      	ldrh	r3, [r3, #24]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	60fb      	str	r3, [r7, #12]
		for(temp = 0; temp < num_bytes; temp++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e029      	b.n	8000a5a <I2C1_read+0x122>
			if(temp == num_bytes-1)
 8000a06:	797b      	ldrb	r3, [r7, #5]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d108      	bne.n	8000a24 <I2C1_read+0xec>
				I2C1->CR1 &= ~I2C_CR1_ACK;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <I2C1_read+0x14c>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <I2C1_read+0x14c>)
 8000a16:	8812      	ldrh	r2, [r2, #0]
 8000a18:	b292      	uxth	r2, r2
 8000a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a1e:	b292      	uxth	r2, r2
 8000a20:	801a      	strh	r2, [r3, #0]
			else
				I2C1->CR1 |= I2C_CR1_ACK;
			while((I2C1->SR1 & I2C_SR1_RXNE) == 0) {;} // Wait for all data to be read in.
 8000a22:	e007      	b.n	8000a34 <I2C1_read+0xfc>
		temp = I2C1->SR2; // Read from SR2 to continue.
		for(temp = 0; temp < num_bytes; temp++) {
			if(temp == num_bytes-1)
				I2C1->CR1 &= ~I2C_CR1_ACK;
			else
				I2C1->CR1 |= I2C_CR1_ACK;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <I2C1_read+0x14c>)
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <I2C1_read+0x14c>)
 8000a28:	8812      	ldrh	r2, [r2, #0]
 8000a2a:	b292      	uxth	r2, r2
 8000a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a30:	b292      	uxth	r2, r2
 8000a32:	801a      	strh	r2, [r3, #0]
			while((I2C1->SR1 & I2C_SR1_RXNE) == 0) {;} // Wait for all data to be read in.
 8000a34:	bf00      	nop
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <I2C1_read+0x14c>)
 8000a38:	8a9b      	ldrh	r3, [r3, #20]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f8      	beq.n	8000a36 <I2C1_read+0xfe>
			data[temp] = I2C1->DR;
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <I2C1_read+0x14c>)
 8000a4c:	8a12      	ldrh	r2, [r2, #16]
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 |= I2C_CR1_START; // RESTART the transmission.
		while((I2C1->SR1 & I2C_SR1_SB) == 0) {;}
		I2C1->DR = (uint8_t)((slave_add << 1) | (1 << 0)); // Re-send slave address.
		while((I2C1->SR1 & I2C_SR1_ADDR)==0) {;} // Wait for start condition to be valid
		temp = I2C1->SR2; // Read from SR2 to continue.
		for(temp = 0; temp < num_bytes; temp++) {
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	797a      	ldrb	r2, [r7, #5]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d8d1      	bhi.n	8000a06 <I2C1_read+0xce>
			else
				I2C1->CR1 |= I2C_CR1_ACK;
			while((I2C1->SR1 & I2C_SR1_RXNE) == 0) {;} // Wait for all data to be read in.
			data[temp] = I2C1->DR;
		}
		I2C1->CR1 |= I2C_CR1_STOP; // Stop transmitting.
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <I2C1_read+0x14c>)
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <I2C1_read+0x14c>)
 8000a66:	8812      	ldrh	r2, [r2, #0]
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	801a      	strh	r2, [r3, #0]
		return; // Return the recieved data.
 8000a72:	e000      	b.n	8000a76 <I2C1_read+0x13e>
	}
	else
		return;
 8000a74:	bf00      	nop
}
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	2000001d 	.word	0x2000001d
 8000a84:	40005400 	.word	0x40005400

08000a88 <__libc_init_array>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <__libc_init_array+0x3c>)
 8000a8c:	4d0e      	ldr	r5, [pc, #56]	; (8000ac8 <__libc_init_array+0x40>)
 8000a8e:	1aed      	subs	r5, r5, r3
 8000a90:	10ad      	asrs	r5, r5, #2
 8000a92:	2400      	movs	r4, #0
 8000a94:	461e      	mov	r6, r3
 8000a96:	42ac      	cmp	r4, r5
 8000a98:	d004      	beq.n	8000aa4 <__libc_init_array+0x1c>
 8000a9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000a9e:	4790      	blx	r2
 8000aa0:	3401      	adds	r4, #1
 8000aa2:	e7f8      	b.n	8000a96 <__libc_init_array+0xe>
 8000aa4:	f000 f816 	bl	8000ad4 <_init>
 8000aa8:	4d08      	ldr	r5, [pc, #32]	; (8000acc <__libc_init_array+0x44>)
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <__libc_init_array+0x48>)
 8000aac:	1aed      	subs	r5, r5, r3
 8000aae:	10ad      	asrs	r5, r5, #2
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	461e      	mov	r6, r3
 8000ab4:	42ac      	cmp	r4, r5
 8000ab6:	d004      	beq.n	8000ac2 <__libc_init_array+0x3a>
 8000ab8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000abc:	4790      	blx	r2
 8000abe:	3401      	adds	r4, #1
 8000ac0:	e7f8      	b.n	8000ab4 <__libc_init_array+0x2c>
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	08000aec 	.word	0x08000aec
 8000ac8:	08000aec 	.word	0x08000aec
 8000acc:	08000af0 	.word	0x08000af0
 8000ad0:	08000aec 	.word	0x08000aec

08000ad4 <_init>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	bf00      	nop
 8000ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ada:	bc08      	pop	{r3}
 8000adc:	469e      	mov	lr, r3
 8000ade:	4770      	bx	lr

08000ae0 <_fini>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	bf00      	nop
 8000ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae6:	bc08      	pop	{r3}
 8000ae8:	469e      	mov	lr, r3
 8000aea:	4770      	bx	lr
