
I2C_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  08002308  08002308  0000a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b0c  08002b0c  0000ab0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b10  08002b10  0000ab10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002b14  00010000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f4c  20000004  20000004  00010004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000f50  20000f50  00010004  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004df7  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001009  00000000  00000000  00014e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003c8  00000000  00000000  00015e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00016200  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002060  00000000  00000000  000164d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001d8b  00000000  00000000  00018538  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000f2  00000000  00000000  0001a2c3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000948  00000000  00000000  0001a3b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000008f0  00000000  00000000  0001ad00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022f0 	.word	0x080022f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080022f0 	.word	0x080022f0
 80001c4:	20000008 	.word	0x20000008

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <SystemInit+0x5c>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <SystemInit+0x5c>)
 8000b14:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000b18:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <SystemInit+0x60>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <SystemInit+0x60>)
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	f042 0201 	orr.w	r2, r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <SystemInit+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <SystemInit+0x60>)
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <SystemInit+0x60>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <SystemInit+0x60>)
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SystemInit+0x64>)
 8000b46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <SystemInit+0x60>)
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <SystemInit+0x60>)
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b52:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SystemInit+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b5a:	f000 f80b 	bl	8000b74 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b5e:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <SystemInit+0x5c>)
 8000b60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b64:	609a      	str	r2, [r3, #8]
#endif
}
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	24003010 	.word	0x24003010

08000b74 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <SetSysClock+0xe4>)
 8000b84:	4a34      	ldr	r2, [pc, #208]	; (8000c58 <SetSysClock+0xe4>)
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b8c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <SetSysClock+0xe4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d103      	bne.n	8000bac <SetSysClock+0x38>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000baa:	d1f0      	bne.n	8000b8e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <SetSysClock+0xe4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e001      	b.n	8000bc2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d142      	bne.n	8000c4e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <SetSysClock+0xe4>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <SetSysClock+0xe4>)
 8000bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <SetSysClock+0xe8>)
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <SetSysClock+0xe8>)
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000bde:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <SetSysClock+0xe4>)
 8000be2:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <SetSysClock+0xe4>)
 8000be4:	6892      	ldr	r2, [r2, #8]
 8000be6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <SetSysClock+0xe4>)
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <SetSysClock+0xe4>)
 8000bec:	6892      	ldr	r2, [r2, #8]
 8000bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bf2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <SetSysClock+0xe4>)
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <SetSysClock+0xe4>)
 8000bf8:	6892      	ldr	r2, [r2, #8]
 8000bfa:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000bfe:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <SetSysClock+0xe4>)
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <SetSysClock+0xec>)
 8000c04:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <SetSysClock+0xe4>)
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <SetSysClock+0xe4>)
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c10:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c12:	bf00      	nop
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <SetSysClock+0xe4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <SetSysClock+0xf0>)
 8000c22:	f240 6205 	movw	r2, #1541	; 0x605
 8000c26:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <SetSysClock+0xe4>)
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <SetSysClock+0xe4>)
 8000c2c:	6892      	ldr	r2, [r2, #8]
 8000c2e:	f022 0203 	bic.w	r2, r2, #3
 8000c32:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <SetSysClock+0xe4>)
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <SetSysClock+0xe4>)
 8000c38:	6892      	ldr	r2, [r2, #8]
 8000c3a:	f042 0202 	orr.w	r2, r2, #2
 8000c3e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000c40:	bf00      	nop
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SetSysClock+0xe4>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d1f9      	bne.n	8000c42 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	07405408 	.word	0x07405408
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c68:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000ca8 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6e:	f000 b804 	b.w	8000c7a <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000c74:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c76:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c78:	3104      	adds	r1, #4

08000c7a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000c7e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c80:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c82:	f4ff aff6 	bcc.w	8000c72 <CopyDataInit>
  ldr  r2, =_sbss
 8000c86:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000c88:	f000 b803 	b.w	8000c92 <LoopFillZerobss>

08000c8c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c8c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c8e:	f842 3b04 	str.w	r3, [r2], #4

08000c92 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000c94:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c96:	f4ff aff9 	bcc.w	8000c8c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ff37 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f001 fb01 	bl	80022a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f000 f80f 	bl	8000cc4 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000cac:	08002b14 	.word	0x08002b14
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb4:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000cb8:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cbc:	20000f50 	.word	0x20000f50

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	f7ff bffe 	b.w	8000cc0 <ADC_IRQHandler>

08000cc4 <main>:
	PE14 - DB7
	PB10 - Rs
	PB11 - R/W
	PB12 - E
*/
int main() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <main+0x30>)
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <main+0x30>)
 8000ccc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000cce:	f042 0202 	orr.w	r2, r2, #2
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30
	//GPIOD->MODER |= (1 << 10);
	// 0 1 2 5 7 8 11 12 13 14 15
	disp_init('B', 0b1111100110100111);
 8000cd4:	2042      	movs	r0, #66	; 0x42
 8000cd6:	f64f 11a7 	movw	r1, #63911	; 0xf9a7
 8000cda:	f000 f933 	bl	8000f44 <disp_init>
	delay_ms(45);
 8000cde:	202d      	movs	r0, #45	; 0x2d
 8000ce0:	f000 f8ec 	bl	8000ebc <delay_ms>
	//GPIOB->MODER = 0b00010101010000010100010100010101; // 0011 1001 1011 1111
	//GPIOB->ODR = 0;
	//GPIOB->ODR = 0b0111100110110111;

	//uint32_t data = (0x30); // 1110 0010
	disp_wrt_com(0x0F);
 8000ce4:	200f      	movs	r0, #15
 8000ce6:	f000 fa1f 	bl	8001128 <disp_wrt_com>
	while(1) {
		delay_us(5);
 8000cea:	2005      	movs	r0, #5
 8000cec:	f000 f8fe 	bl	8000eec <delay_us>
		//
	}
 8000cf0:	e7fb      	b.n	8000cea <main+0x26>
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <get_data>:
 * gyro has six more registers, and temperature has 2 and is in between accel and gyro.  I just read it
 * because skipping it on I2C would take many different I2C transfers, while reading sequentially happens
 * automatically.
 *
 * */
void get_data(uint8_t *data){
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

	/*
	 * Part 1: Get Data from Gyro and Accel
	 */
	int i = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]

	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 8000d04:	bf00      	nop
 8000d06:	4840      	ldr	r0, [pc, #256]	; (8000e08 <get_data+0x110>)
 8000d08:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000d0c:	f001 f90e 	bl	8001f2c <I2C_GetFlagStatus>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f7      	bne.n	8000d06 <get_data+0xe>

	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8000d16:	483c      	ldr	r0, [pc, #240]	; (8000e08 <get_data+0x110>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	f001 f899 	bl	8001e50 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2C1, ENABLE);
 8000d1e:	483a      	ldr	r0, [pc, #232]	; (8000e08 <get_data+0x110>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	f001 f837 	bl	8001d94 <I2C_GenerateSTART>

	// wait for I2C1 EV5 --> Slave has acknowledged start condition
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8000d26:	bf00      	nop
 8000d28:	4837      	ldr	r0, [pc, #220]	; (8000e08 <get_data+0x110>)
 8000d2a:	4938      	ldr	r1, [pc, #224]	; (8000e0c <get_data+0x114>)
 8000d2c:	f001 f8ce 	bl	8001ecc <I2C_CheckEvent>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f8      	beq.n	8000d28 <get_data+0x30>

	// Send slave Address for write
	I2C_Send7bitAddress(I2C1, MPU_Gyro_Accel<<1, I2C_Direction_Transmitter);
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <get_data+0x118>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4831      	ldr	r0, [pc, #196]	; (8000e08 <get_data+0x110>)
 8000d42:	4619      	mov	r1, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	f001 f865 	bl	8001e14 <I2C_Send7bitAddress>

	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8000d4a:	bf00      	nop
 8000d4c:	482e      	ldr	r0, [pc, #184]	; (8000e08 <get_data+0x110>)
 8000d4e:	4931      	ldr	r1, [pc, #196]	; (8000e14 <get_data+0x11c>)
 8000d50:	f001 f8bc 	bl	8001ecc <I2C_CheckEvent>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f8      	beq.n	8000d4c <get_data+0x54>

	I2C_SendData(I2C1, (uint8_t) (0x3B));
 8000d5a:	482b      	ldr	r0, [pc, #172]	; (8000e08 <get_data+0x110>)
 8000d5c:	213b      	movs	r1, #59	; 0x3b
 8000d5e:	f001 f897 	bl	8001e90 <I2C_SendData>

	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000d62:	bf00      	nop
 8000d64:	4828      	ldr	r0, [pc, #160]	; (8000e08 <get_data+0x110>)
 8000d66:	492c      	ldr	r1, [pc, #176]	; (8000e18 <get_data+0x120>)
 8000d68:	f001 f8b0 	bl	8001ecc <I2C_CheckEvent>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f8      	beq.n	8000d64 <get_data+0x6c>

	I2C_GenerateSTART(I2C1, ENABLE);
 8000d72:	4825      	ldr	r0, [pc, #148]	; (8000e08 <get_data+0x110>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	f001 f80d 	bl	8001d94 <I2C_GenerateSTART>

	// wait for I2C1 EV5 --> Slave has acknowledged start condition
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8000d7a:	bf00      	nop
 8000d7c:	4822      	ldr	r0, [pc, #136]	; (8000e08 <get_data+0x110>)
 8000d7e:	4923      	ldr	r1, [pc, #140]	; (8000e0c <get_data+0x114>)
 8000d80:	f001 f8a4 	bl	8001ecc <I2C_CheckEvent>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f8      	beq.n	8000d7c <get_data+0x84>

	// Send slave Address for read
	I2C_Send7bitAddress(I2C1, MPU_Gyro_Accel<<1, I2C_Direction_Receiver);
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <get_data+0x118>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	481c      	ldr	r0, [pc, #112]	; (8000e08 <get_data+0x110>)
 8000d96:	4619      	mov	r1, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f001 f83b 	bl	8001e14 <I2C_Send7bitAddress>

	for(i = 0; i<13; i++){
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e012      	b.n	8000dca <get_data+0xd2>
		// wait until one byte has been received
		while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000da4:	bf00      	nop
 8000da6:	4818      	ldr	r0, [pc, #96]	; (8000e08 <get_data+0x110>)
 8000da8:	491c      	ldr	r1, [pc, #112]	; (8000e1c <get_data+0x124>)
 8000daa:	f001 f88f 	bl	8001ecc <I2C_CheckEvent>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f8      	beq.n	8000da6 <get_data+0xae>
		//read data:
		data[i] = I2C_ReceiveData(I2C1);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	18d4      	adds	r4, r2, r3
 8000dba:	4813      	ldr	r0, [pc, #76]	; (8000e08 <get_data+0x110>)
 8000dbc:	f001 f878 	bl	8001eb0 <I2C_ReceiveData>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	7023      	strb	r3, [r4, #0]
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));

	// Send slave Address for read
	I2C_Send7bitAddress(I2C1, MPU_Gyro_Accel<<1, I2C_Direction_Receiver);

	for(i = 0; i<13; i++){
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b0c      	cmp	r3, #12
 8000dce:	dde9      	ble.n	8000da4 <get_data+0xac>
		//read data:
		data[i] = I2C_ReceiveData(I2C1);
	}

	//MPU uses NACK for last read
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <get_data+0x110>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f001 f83c 	bl	8001e50 <I2C_AcknowledgeConfig>

	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000dd8:	bf00      	nop
 8000dda:	480b      	ldr	r0, [pc, #44]	; (8000e08 <get_data+0x110>)
 8000ddc:	490f      	ldr	r1, [pc, #60]	; (8000e1c <get_data+0x124>)
 8000dde:	f001 f875 	bl	8001ecc <I2C_CheckEvent>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f8      	beq.n	8000dda <get_data+0xe2>

	//read last byte
	data[13] = I2C_ReceiveData(I2C1);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 040d 	add.w	r4, r3, #13
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <get_data+0x110>)
 8000df0:	f001 f85e 	bl	8001eb0 <I2C_ReceiveData>
 8000df4:	4603      	mov	r3, r0
 8000df6:	7023      	strb	r3, [r4, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <get_data+0x110>)
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	f000 ffea 	bl	8001dd4 <I2C_GenerateSTOP>
//
//	//read last byte
//	data[19] = I2C_ReceiveData(I2C1);
//
//	I2C_GenerateSTOP(I2C1, ENABLE);
}
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	00030001 	.word	0x00030001
 8000e10:	20000000 	.word	0x20000000
 8000e14:	00070082 	.word	0x00070082
 8000e18:	00070084 	.word	0x00070084
 8000e1c:	00030040 	.word	0x00030040

08000e20 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	da0b      	bge.n	8000e4c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000e34:	490d      	ldr	r1, [pc, #52]	; (8000e6c <NVIC_SetPriority+0x4c>)
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	3b04      	subs	r3, #4
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	761a      	strb	r2, [r3, #24]
 8000e4a:	e009      	b.n	8000e60 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000e4c:	4908      	ldr	r1, [pc, #32]	; (8000e70 <NVIC_SetPriority+0x50>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <delay_init>:
 */

#include "delay.h"
#include "stm32f4xx_it.h"
// Initializes the SysTick timer to 1000Hz, gives 1mS delay resolution
void delay_init(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (3 << 1);
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <delay_init+0x3c>)
 8000e7a:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <delay_init+0x3c>)
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	f042 0206 	orr.w	r2, r2, #6
 8000e82:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 168;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <delay_init+0x3c>)
 8000e86:	22a8      	movs	r2, #168	; 0xa8
 8000e88:	605a      	str	r2, [r3, #4]
    SysTick->CTRL |= (1 << 0);
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <delay_init+0x3c>)
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <delay_init+0x3c>)
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	f042 0201 	orr.w	r2, r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(SysTick_IRQn, 1);      // Set to high-priority
 8000e96:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	f7ff ffc0 	bl	8000e20 <NVIC_SetPriority>
    delay_tics = 0;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <delay_init+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
    SysTick_callback = NULL;
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <delay_init+0x44>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010
 8000eb4:	20000024 	.word	0x20000024
 8000eb8:	20000020 	.word	0x20000020

08000ebc <delay_ms>:

// Delays the specified number of milliseconds
void delay_ms(uint32_t delay) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    delay_tics = delay*1000;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eca:	fb02 f203 	mul.w	r2, r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <delay_ms+0x2c>)
 8000ed0:	601a      	str	r2, [r3, #0]
    while(delay_tics) {     // Loop until delay_tics == 0
 8000ed2:	e000      	b.n	8000ed6 <delay_ms+0x1a>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000ed4:	bf30      	wfi
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <delay_ms+0x2c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1fa      	bne.n	8000ed4 <delay_ms+0x18>
        __WFI();            // Put processor to sleep until interrupt occurs
    }
}
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	20000024 	.word	0x20000024

08000eec <delay_us>:

// Delays the specified number of milliseconds
void delay_us(uint32_t delay) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    delay_tics = delay;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <delay_us+0x24>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]
    while(delay_tics) {     // Loop until delay_tics == 0
 8000efa:	e000      	b.n	8000efe <delay_us+0x12>
 8000efc:	bf30      	wfi
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <delay_us+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1fa      	bne.n	8000efc <delay_us+0x10>
        __WFI();            // Put processor to sleep until interrupt occurs
    }
}
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000024 	.word	0x20000024

08000f14 <SysTick_Handler>:
// Clears the SysTick callback
void SysTick_clearCallback(void) {
    SysTick_callback = NULL;
}

void SysTick_Handler(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    if(delay_tics)          // If delay_tics is nonzero, decrement it
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <SysTick_Handler+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <SysTick_Handler+0x16>
        delay_tics--;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SysTick_Handler+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1e5a      	subs	r2, r3, #1
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Handler+0x28>)
 8000f28:	601a      	str	r2, [r3, #0]
    if(SysTick_callback)    // If a callback function has been registered, call it
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Handler+0x2c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <SysTick_Handler+0x24>
        SysTick_callback();
 8000f32:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <SysTick_Handler+0x2c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4798      	blx	r3
}
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000024 	.word	0x20000024
 8000f40:	20000020 	.word	0x20000020

08000f44 <disp_init>:
// 1. RS
// 2. R/W
// 3. E
// 4-7. DB0-DB3
// 8-11. DB4-DB7
void disp_init(char port, uint16_t _pins) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	71fa      	strb	r2, [r7, #7]
 8000f50:	80bb      	strh	r3, [r7, #4]
	pins = _pins; // Store the pins that are being used.
 8000f52:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <disp_init+0x1b8>)
 8000f54:	88ba      	ldrh	r2, [r7, #4]
 8000f56:	801a      	strh	r2, [r3, #0]

	// Set the port addresses
	switch(port) {
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	3b41      	subs	r3, #65	; 0x41
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	d84b      	bhi.n	8000ff8 <disp_init+0xb4>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <disp_init+0x24>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f81 	.word	0x08000f81
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	08000fa9 	.word	0x08000fa9
 8000f74:	08000fbd 	.word	0x08000fbd
 8000f78:	08000fd1 	.word	0x08000fd1
 8000f7c:	08000fe5 	.word	0x08000fe5
		case 'A' :
			RCC->AHB1ENR |= (1 << 0);
 8000f80:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <disp_init+0x1bc>)
 8000f82:	4a5f      	ldr	r2, [pc, #380]	; (8001100 <disp_init+0x1bc>)
 8000f84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
			base_addr = GPIOA_BASE;
 8000f8c:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <disp_init+0x1c0>)
 8000f8e:	4a5e      	ldr	r2, [pc, #376]	; (8001108 <disp_init+0x1c4>)
 8000f90:	601a      	str	r2, [r3, #0]
			break;
 8000f92:	e031      	b.n	8000ff8 <disp_init+0xb4>

		case 'B' :
			RCC->AHB1ENR |= (1 << 1);
 8000f94:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <disp_init+0x1bc>)
 8000f96:	4a5a      	ldr	r2, [pc, #360]	; (8001100 <disp_init+0x1bc>)
 8000f98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
			base_addr = GPIOB_BASE;
 8000fa0:	4b58      	ldr	r3, [pc, #352]	; (8001104 <disp_init+0x1c0>)
 8000fa2:	4a5a      	ldr	r2, [pc, #360]	; (800110c <disp_init+0x1c8>)
 8000fa4:	601a      	str	r2, [r3, #0]
			break;
 8000fa6:	e027      	b.n	8000ff8 <disp_init+0xb4>

		case 'C' :
			RCC->AHB1ENR |= (1 << 2);
 8000fa8:	4b55      	ldr	r3, [pc, #340]	; (8001100 <disp_init+0x1bc>)
 8000faa:	4a55      	ldr	r2, [pc, #340]	; (8001100 <disp_init+0x1bc>)
 8000fac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fae:	f042 0204 	orr.w	r2, r2, #4
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
			base_addr = GPIOC_BASE;
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <disp_init+0x1c0>)
 8000fb6:	4a56      	ldr	r2, [pc, #344]	; (8001110 <disp_init+0x1cc>)
 8000fb8:	601a      	str	r2, [r3, #0]
			break;
 8000fba:	e01d      	b.n	8000ff8 <disp_init+0xb4>

		case 'D' :
			RCC->AHB1ENR |= (1 << 3);
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <disp_init+0x1bc>)
 8000fbe:	4a50      	ldr	r2, [pc, #320]	; (8001100 <disp_init+0x1bc>)
 8000fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fc2:	f042 0208 	orr.w	r2, r2, #8
 8000fc6:	631a      	str	r2, [r3, #48]	; 0x30
			base_addr = GPIOD_BASE;
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <disp_init+0x1c0>)
 8000fca:	4a52      	ldr	r2, [pc, #328]	; (8001114 <disp_init+0x1d0>)
 8000fcc:	601a      	str	r2, [r3, #0]
			break;
 8000fce:	e013      	b.n	8000ff8 <disp_init+0xb4>

		case 'E' :
			RCC->AHB1ENR |= (1 << 4);
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <disp_init+0x1bc>)
 8000fd2:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <disp_init+0x1bc>)
 8000fd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fd6:	f042 0210 	orr.w	r2, r2, #16
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
			base_addr = GPIOE_BASE;
 8000fdc:	4b49      	ldr	r3, [pc, #292]	; (8001104 <disp_init+0x1c0>)
 8000fde:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <disp_init+0x1d4>)
 8000fe0:	601a      	str	r2, [r3, #0]
			break;
 8000fe2:	e009      	b.n	8000ff8 <disp_init+0xb4>

		case 'F' :
			RCC->AHB1ENR |= (1 << 5);
 8000fe4:	4b46      	ldr	r3, [pc, #280]	; (8001100 <disp_init+0x1bc>)
 8000fe6:	4a46      	ldr	r2, [pc, #280]	; (8001100 <disp_init+0x1bc>)
 8000fe8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fea:	f042 0220 	orr.w	r2, r2, #32
 8000fee:	631a      	str	r2, [r3, #48]	; 0x30
			base_addr = GPIOF_BASE;
 8000ff0:	4b44      	ldr	r3, [pc, #272]	; (8001104 <disp_init+0x1c0>)
 8000ff2:	4a4a      	ldr	r2, [pc, #296]	; (800111c <disp_init+0x1d8>)
 8000ff4:	601a      	str	r2, [r3, #0]
			break;
 8000ff6:	bf00      	nop
	}
	uint32_t spd_addr = base_addr + 0x08;
 8000ff8:	4b42      	ldr	r3, [pc, #264]	; (8001104 <disp_init+0x1c0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	60bb      	str	r3, [r7, #8]
	odr_addr = base_addr + 0x14;
 8001000:	4b40      	ldr	r3, [pc, #256]	; (8001104 <disp_init+0x1c0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f103 0214 	add.w	r2, r3, #20
 8001008:	4b45      	ldr	r3, [pc, #276]	; (8001120 <disp_init+0x1dc>)
 800100a:	601a      	str	r2, [r3, #0]
	
	// Set MODE register.
	uint16_t i;
	for(i = 0; i < 16; i++) {
 800100c:	2300      	movs	r3, #0
 800100e:	81fb      	strh	r3, [r7, #14]
 8001010:	e015      	b.n	800103e <disp_init+0xfa>
		*addr(base_addr) |= ((pins >> i) & 1) << (i*2);
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <disp_init+0x1c0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a3b      	ldr	r2, [pc, #236]	; (8001104 <disp_init+0x1c0>)
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	6811      	ldr	r1, [r2, #0]
 800101c:	4a37      	ldr	r2, [pc, #220]	; (80010fc <disp_init+0x1b8>)
 800101e:	8812      	ldrh	r2, [r2, #0]
 8001020:	4610      	mov	r0, r2
 8001022:	89fa      	ldrh	r2, [r7, #14]
 8001024:	fa40 f202 	asr.w	r2, r0, r2
 8001028:	f002 0001 	and.w	r0, r2, #1
 800102c:	89fa      	ldrh	r2, [r7, #14]
 800102e:	0052      	lsls	r2, r2, #1
 8001030:	fa00 f202 	lsl.w	r2, r0, r2
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
	uint32_t spd_addr = base_addr + 0x08;
	odr_addr = base_addr + 0x14;
	
	// Set MODE register.
	uint16_t i;
	for(i = 0; i < 16; i++) {
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	3301      	adds	r3, #1
 800103c:	81fb      	strh	r3, [r7, #14]
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d9e6      	bls.n	8001012 <disp_init+0xce>
		*addr(base_addr) |= ((pins >> i) & 1) << (i*2);
	}
	
	// Set the speed. 
	for(i = 0; i < 16; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	81fb      	strh	r3, [r7, #14]
 8001048:	e025      	b.n	8001096 <disp_init+0x152>
		*addr(spd_addr) |= ((pins >> i) & 1) << (i*2);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	6811      	ldr	r1, [r2, #0]
 8001050:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <disp_init+0x1b8>)
 8001052:	8812      	ldrh	r2, [r2, #0]
 8001054:	4610      	mov	r0, r2
 8001056:	89fa      	ldrh	r2, [r7, #14]
 8001058:	fa40 f202 	asr.w	r2, r0, r2
 800105c:	f002 0001 	and.w	r0, r2, #1
 8001060:	89fa      	ldrh	r2, [r7, #14]
 8001062:	0052      	lsls	r2, r2, #1
 8001064:	fa00 f202 	lsl.w	r2, r0, r2
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
		*addr(spd_addr) |= ((pins >> i) & 1) << ((i*2)+1);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	6811      	ldr	r1, [r2, #0]
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <disp_init+0x1b8>)
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	4610      	mov	r0, r2
 8001078:	89fa      	ldrh	r2, [r7, #14]
 800107a:	fa40 f202 	asr.w	r2, r0, r2
 800107e:	f002 0001 	and.w	r0, r2, #1
 8001082:	89fa      	ldrh	r2, [r7, #14]
 8001084:	0052      	lsls	r2, r2, #1
 8001086:	3201      	adds	r2, #1
 8001088:	fa00 f202 	lsl.w	r2, r0, r2
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 16; i++) {
		*addr(base_addr) |= ((pins >> i) & 1) << (i*2);
	}
	
	// Set the speed. 
	for(i = 0; i < 16; i++) {
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	3301      	adds	r3, #1
 8001094:	81fb      	strh	r3, [r7, #14]
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d9d6      	bls.n	800104a <disp_init+0x106>
		*addr(spd_addr) |= ((pins >> i) & 1) << (i*2);
		*addr(spd_addr) |= ((pins >> i) & 1) << ((i*2)+1);
	}

	// Set output to low.
	*addr(odr_addr) &= ~(pins);
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <disp_init+0x1dc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <disp_init+0x1dc>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	6811      	ldr	r1, [r2, #0]
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <disp_init+0x1b8>)
 80010a8:	8812      	ldrh	r2, [r2, #0]
 80010aa:	43d2      	mvns	r2, r2
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]

	// Find the bit positions.
	uint16_t shift = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < 16; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
 80010b8:	e014      	b.n	80010e4 <disp_init+0x1a0>
		if((1 << i) & pins) {
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <disp_init+0x1b8>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	fa42 f303 	asr.w	r3, r2, r3
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <disp_init+0x19a>
			bit_pos[shift] = i;
 80010ce:	89bb      	ldrh	r3, [r7, #12]
 80010d0:	89fa      	ldrh	r2, [r7, #14]
 80010d2:	b2d1      	uxtb	r1, r2
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <disp_init+0x1e0>)
 80010d6:	54d1      	strb	r1, [r2, r3]
			shift++;
 80010d8:	89bb      	ldrh	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	81bb      	strh	r3, [r7, #12]
	// Set output to low.
	*addr(odr_addr) &= ~(pins);

	// Find the bit positions.
	uint16_t shift = 0;
	for(i = 0; i < 16; i++) {
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	3301      	adds	r3, #1
 80010e2:	81fb      	strh	r3, [r7, #14]
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	d9e7      	bls.n	80010ba <disp_init+0x176>
			shift++;
		}
	}

	// Initialize the delay functionality.
	delay_init();
 80010ea:	f7ff fec3 	bl	8000e74 <delay_init>
	delay_us(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff fefc 	bl	8000eec <delay_us>

}
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000034 	.word	0x20000034
 8001100:	40023800 	.word	0x40023800
 8001104:	2000003c 	.word	0x2000003c
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40021400 	.word	0x40021400
 8001120:	20000038 	.word	0x20000038
 8001124:	20000028 	.word	0x20000028

08001128 <disp_wrt_com>:
 * 8. Reset data lines back to zero.
 * 9. Return.
 */


void disp_wrt_com(uint32_t data) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	*addr(odr_addr) &= ~pins;
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <disp_wrt_com+0x128>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <disp_wrt_com+0x128>)
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	6811      	ldr	r1, [r2, #0]
 800113a:	4a46      	ldr	r2, [pc, #280]	; (8001254 <disp_wrt_com+0x12c>)
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	43d2      	mvns	r2, r2
 8001140:	400a      	ands	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
	// (1)
	*addr(odr_addr) &= ~(1 << bit_pos[0]);
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <disp_wrt_com+0x128>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a41      	ldr	r2, [pc, #260]	; (8001250 <disp_wrt_com+0x128>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	4a42      	ldr	r2, [pc, #264]	; (8001258 <disp_wrt_com+0x130>)
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	2001      	movs	r0, #1
 8001154:	fa00 f202 	lsl.w	r2, r0, r2
 8001158:	43d2      	mvns	r2, r2
 800115a:	400a      	ands	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
	// (2)
	*addr(odr_addr) &= ~(1 << bit_pos[1]);
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <disp_wrt_com+0x128>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <disp_wrt_com+0x128>)
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	6811      	ldr	r1, [r2, #0]
 8001168:	4a3b      	ldr	r2, [pc, #236]	; (8001258 <disp_wrt_com+0x130>)
 800116a:	7852      	ldrb	r2, [r2, #1]
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	43d2      	mvns	r2, r2
 8001174:	400a      	ands	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
	// (3)
	*addr(odr_addr) |= (1 << bit_pos[2]);
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <disp_wrt_com+0x128>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a34      	ldr	r2, [pc, #208]	; (8001250 <disp_wrt_com+0x128>)
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	6811      	ldr	r1, [r2, #0]
 8001182:	4a35      	ldr	r2, [pc, #212]	; (8001258 <disp_wrt_com+0x130>)
 8001184:	7892      	ldrb	r2, [r2, #2]
 8001186:	2001      	movs	r0, #1
 8001188:	fa00 f202 	lsl.w	r2, r0, r2
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
	// (4)
	uint8_t i;
	uint16_t send_data;
	for(i = 3; i < 11; i++) {
 8001190:	2303      	movs	r3, #3
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e014      	b.n	80011c0 <disp_wrt_com+0x98>
		uint32_t temp = (data >> (i-3)) & 1;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	3b03      	subs	r3, #3
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
		send_data |= (temp << bit_pos[i]);
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <disp_wrt_com+0x130>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	81bb      	strh	r3, [r7, #12]
	// (3)
	*addr(odr_addr) |= (1 << bit_pos[2]);
	// (4)
	uint8_t i;
	uint16_t send_data;
	for(i = 3; i < 11; i++) {
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	3301      	adds	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b0a      	cmp	r3, #10
 80011c4:	d9e7      	bls.n	8001196 <disp_wrt_com+0x6e>
		uint32_t temp = (data >> (i-3)) & 1;
		send_data |= (temp << bit_pos[i]);
	}
	*addr(odr_addr) |= send_data; //1100 1100 1100 1000
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <disp_wrt_com+0x128>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a21      	ldr	r2, [pc, #132]	; (8001250 <disp_wrt_com+0x128>)
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	6811      	ldr	r1, [r2, #0]
 80011d0:	89ba      	ldrh	r2, [r7, #12]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
	*addr(odr_addr) &= ~(1 << bit_pos[0]);
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <disp_wrt_com+0x128>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <disp_wrt_com+0x128>)
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6811      	ldr	r1, [r2, #0]
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <disp_wrt_com+0x130>)
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	43d2      	mvns	r2, r2
 80011ec:	400a      	ands	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
	*addr(odr_addr) &= ~(1 << bit_pos[1]);
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <disp_wrt_com+0x128>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a16      	ldr	r2, [pc, #88]	; (8001250 <disp_wrt_com+0x128>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	6811      	ldr	r1, [r2, #0]
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <disp_wrt_com+0x130>)
 80011fc:	7852      	ldrb	r2, [r2, #1]
 80011fe:	2001      	movs	r0, #1
 8001200:	fa00 f202 	lsl.w	r2, r0, r2
 8001204:	43d2      	mvns	r2, r2
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
	//GPIOB->ODR |= (0xFF << 3);
	// (5)
	delay_us(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff fe6e 	bl	8000eec <delay_us>
	// (6)
	*addr(odr_addr) &= ~(1 << bit_pos[2]);
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <disp_wrt_com+0x128>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <disp_wrt_com+0x128>)
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	6811      	ldr	r1, [r2, #0]
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <disp_wrt_com+0x130>)
 800121c:	7892      	ldrb	r2, [r2, #2]
 800121e:	2001      	movs	r0, #1
 8001220:	fa00 f202 	lsl.w	r2, r0, r2
 8001224:	43d2      	mvns	r2, r2
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
	// (7)
	delay_us(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff fe5e 	bl	8000eec <delay_us>
	//(8)
	*addr(odr_addr) &= ~pins;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <disp_wrt_com+0x128>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <disp_wrt_com+0x128>)
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <disp_wrt_com+0x12c>)
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	43d2      	mvns	r2, r2
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
	data = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
	return;
 8001248:	bf00      	nop
}
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000038 	.word	0x20000038
 8001254:	20000034 	.word	0x20000034
 8001258:	20000028 	.word	0x20000028
 800125c:	00000000 	.word	0x00000000

08001260 <imu_update>:

/*
	Update the kinematic variables. 
	This gets the raw data over I2C and calculates the 
*/
void imu_update() {
 8001260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
	// Collect the raw data from the IMU and put it into it's full variables
	get_imu();
 8001268:	f000 fc50 	bl	8001b0c <get_imu>
	x_accel = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 800126c:	4b9d      	ldr	r3, [pc, #628]	; (80014e4 <imu_update+0x284>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b9b      	ldr	r3, [pc, #620]	; (80014e4 <imu_update+0x284>)
 8001276:	785b      	ldrb	r3, [r3, #1]
 8001278:	4313      	orrs	r3, r2
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b9a      	ldr	r3, [pc, #616]	; (80014e8 <imu_update+0x288>)
 800127e:	801a      	strh	r2, [r3, #0]
	y_accel = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8001280:	4b98      	ldr	r3, [pc, #608]	; (80014e4 <imu_update+0x284>)
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b96      	ldr	r3, [pc, #600]	; (80014e4 <imu_update+0x284>)
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	4313      	orrs	r3, r2
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b96      	ldr	r3, [pc, #600]	; (80014ec <imu_update+0x28c>)
 8001292:	801a      	strh	r2, [r3, #0]
	z_accel = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001294:	4b93      	ldr	r3, [pc, #588]	; (80014e4 <imu_update+0x284>)
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <imu_update+0x284>)
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b92      	ldr	r3, [pc, #584]	; (80014f0 <imu_update+0x290>)
 80012a6:	801a      	strh	r2, [r3, #0]
	x_gyro = (int16_t)((raw_data[8] << 8) | raw_data[9]);
 80012a8:	4b8e      	ldr	r3, [pc, #568]	; (80014e4 <imu_update+0x284>)
 80012aa:	7a1b      	ldrb	r3, [r3, #8]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b8c      	ldr	r3, [pc, #560]	; (80014e4 <imu_update+0x284>)
 80012b2:	7a5b      	ldrb	r3, [r3, #9]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b8e      	ldr	r3, [pc, #568]	; (80014f4 <imu_update+0x294>)
 80012ba:	801a      	strh	r2, [r3, #0]
	y_gyro = (int16_t)((raw_data[10] << 8) | raw_data[11]);
 80012bc:	4b89      	ldr	r3, [pc, #548]	; (80014e4 <imu_update+0x284>)
 80012be:	7a9b      	ldrb	r3, [r3, #10]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b87      	ldr	r3, [pc, #540]	; (80014e4 <imu_update+0x284>)
 80012c6:	7adb      	ldrb	r3, [r3, #11]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b8a      	ldr	r3, [pc, #552]	; (80014f8 <imu_update+0x298>)
 80012ce:	801a      	strh	r2, [r3, #0]
	z_gyro = (int16_t)((raw_data[12] << 8) | raw_data[13]);
 80012d0:	4b84      	ldr	r3, [pc, #528]	; (80014e4 <imu_update+0x284>)
 80012d2:	7b1b      	ldrb	r3, [r3, #12]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b82      	ldr	r3, [pc, #520]	; (80014e4 <imu_update+0x284>)
 80012da:	7b5b      	ldrb	r3, [r3, #13]
 80012dc:	4313      	orrs	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b86      	ldr	r3, [pc, #536]	; (80014fc <imu_update+0x29c>)
 80012e2:	801a      	strh	r2, [r3, #0]
	
	// Scale gyro data using constant (based on the range that is set, see data sheet to 
	// know for sure what the conversion constant is), then convert from degrees (default) to radians
	// Need to multiply by dt to change from degrees/sec to degrees.
	float32_t dAngle[3];
	dAngle[0] = (float32_t)((x_gyro*coeff_gyro*PI*dt)/(180.0f) - gyro_offset[0]);
 80012e4:	4b83      	ldr	r3, [pc, #524]	; (80014f4 <imu_update+0x294>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	eddf 7a83 	vldr	s15, [pc, #524]	; 8001500 <imu_update+0x2a0>
 80012f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fa:	eddf 7a82 	vldr	s15, [pc, #520]	; 8001504 <imu_update+0x2a4>
 80012fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001302:	4b81      	ldr	r3, [pc, #516]	; (8001508 <imu_update+0x2a8>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130c:	eddf 7a7f 	vldr	s15, [pc, #508]	; 800150c <imu_update+0x2ac>
 8001310:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <imu_update+0x2b0>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131e:	edc7 7a00 	vstr	s15, [r7]
	dAngle[1] = (float32_t)((y_gyro*coeff_gyro*PI*dt)/(180.0f) - gyro_offset[1]);
 8001322:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <imu_update+0x298>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b21b      	sxth	r3, r3
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001330:	eddf 7a73 	vldr	s15, [pc, #460]	; 8001500 <imu_update+0x2a0>
 8001334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001338:	eddf 7a72 	vldr	s15, [pc, #456]	; 8001504 <imu_update+0x2a4>
 800133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001340:	4b71      	ldr	r3, [pc, #452]	; (8001508 <imu_update+0x2a8>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134a:	eddf 7a70 	vldr	s15, [pc, #448]	; 800150c <imu_update+0x2ac>
 800134e:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8001352:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <imu_update+0x2b0>)
 8001354:	edd3 7a01 	vldr	s15, [r3, #4]
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc7 7a01 	vstr	s15, [r7, #4]
	dAngle[2] = (float32_t)((z_gyro*coeff_gyro*PI*dt)/(180.0f) - gyro_offset[2]);
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <imu_update+0x29c>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b21b      	sxth	r3, r3
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136e:	eddf 7a64 	vldr	s15, [pc, #400]	; 8001500 <imu_update+0x2a0>
 8001372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001376:	eddf 7a63 	vldr	s15, [pc, #396]	; 8001504 <imu_update+0x2a4>
 800137a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <imu_update+0x2a8>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001388:	eddf 7a60 	vldr	s15, [pc, #384]	; 800150c <imu_update+0x2ac>
 800138c:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8001390:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <imu_update+0x2b0>)
 8001392:	edd3 7a02 	vldr	s15, [r3, #8]
 8001396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139a:	edc7 7a02 	vstr	s15, [r7, #8]
	
	temp2_data[0] = (float32_t)(x_accel*coeff_accel);
 800139e:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <imu_update+0x288>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	eddf 7a59 	vldr	s15, [pc, #356]	; 8001514 <imu_update+0x2b4>
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <imu_update+0x2b8>)
 80013b6:	edc3 7a00 	vstr	s15, [r3]
	temp2_data[1] = (float32_t)(y_accel*coeff_accel);
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <imu_update+0x28c>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c8:	eddf 7a52 	vldr	s15, [pc, #328]	; 8001514 <imu_update+0x2b4>
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d0:	4b51      	ldr	r3, [pc, #324]	; (8001518 <imu_update+0x2b8>)
 80013d2:	edc3 7a01 	vstr	s15, [r3, #4]
	temp2_data[2] = (float32_t)(z_accel*coeff_accel);
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <imu_update+0x290>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8001514 <imu_update+0x2b4>
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <imu_update+0x2b8>)
 80013ee:	edc3 7a02 	vstr	s15, [r3, #8]

	angle_data[0] += dAngle[0];
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <imu_update+0x2bc>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	edd7 7a00 	vldr	s15, [r7]
 80013fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <imu_update+0x2bc>)
 8001402:	edc3 7a00 	vstr	s15, [r3]
	angle_data[1] += dAngle[1];
 8001406:	4b45      	ldr	r3, [pc, #276]	; (800151c <imu_update+0x2bc>)
 8001408:	ed93 7a01 	vldr	s14, [r3, #4]
 800140c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <imu_update+0x2bc>)
 8001416:	edc3 7a01 	vstr	s15, [r3, #4]
	angle_data[2] += dAngle[2];
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <imu_update+0x2bc>)
 800141c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001420:	edd7 7a02 	vldr	s15, [r7, #8]
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	4b3c      	ldr	r3, [pc, #240]	; (800151c <imu_update+0x2bc>)
 800142a:	edc3 7a02 	vstr	s15, [r3, #8]

	// Remove the gravitational component from the acceleration data.
	// First, put acceleration into the earth frame of reference.
	body_to_earth(&temp1_mat,&angle_mat,&temp2_mat);
 800142e:	483c      	ldr	r0, [pc, #240]	; (8001520 <imu_update+0x2c0>)
 8001430:	493c      	ldr	r1, [pc, #240]	; (8001524 <imu_update+0x2c4>)
 8001432:	4a3d      	ldr	r2, [pc, #244]	; (8001528 <imu_update+0x2c8>)
 8001434:	f000 fa84 	bl	8001940 <body_to_earth>
	// Then subtract the gravity from the acceleration. 
	arm_mat_sub_f32(&temp1_mat, &g_mat, &temp2_mat);
 8001438:	4839      	ldr	r0, [pc, #228]	; (8001520 <imu_update+0x2c0>)
 800143a:	493c      	ldr	r1, [pc, #240]	; (800152c <imu_update+0x2cc>)
 800143c:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <imu_update+0x2c8>)
 800143e:	f000 fda9 	bl	8001f94 <arm_mat_sub_f32>

	// Perform a running average filter. Replace the oldest value with the newest
	accel_avg_x[imu_update_count] = temp2_data[0] - accel_offset[0];
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <imu_update+0x2d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a34      	ldr	r2, [pc, #208]	; (8001518 <imu_update+0x2b8>)
 8001448:	ed92 7a00 	vldr	s14, [r2]
 800144c:	4a39      	ldr	r2, [pc, #228]	; (8001534 <imu_update+0x2d4>)
 800144e:	edd2 7a00 	vldr	s15, [r2]
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	4a38      	ldr	r2, [pc, #224]	; (8001538 <imu_update+0x2d8>)
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	edc3 7a00 	vstr	s15, [r3]
	accel_avg_y[imu_update_count] = temp2_data[1] - accel_offset[1];
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <imu_update+0x2d0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <imu_update+0x2b8>)
 8001466:	ed92 7a01 	vldr	s14, [r2, #4]
 800146a:	4a32      	ldr	r2, [pc, #200]	; (8001534 <imu_update+0x2d4>)
 800146c:	edd2 7a01 	vldr	s15, [r2, #4]
 8001470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001474:	4a31      	ldr	r2, [pc, #196]	; (800153c <imu_update+0x2dc>)
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	edc3 7a00 	vstr	s15, [r3]
	accel_avg_z[imu_update_count] = temp2_data[2] - accel_offset[2];
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <imu_update+0x2d0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <imu_update+0x2b8>)
 8001484:	ed92 7a02 	vldr	s14, [r2, #8]
 8001488:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <imu_update+0x2d4>)
 800148a:	edd2 7a02 	vldr	s15, [r2, #8]
 800148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001492:	4a2b      	ldr	r2, [pc, #172]	; (8001540 <imu_update+0x2e0>)
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	edc3 7a00 	vstr	s15, [r3]
	// STILL NEED TO TEST! GOING TO REPLACE SUMMING LOOP!
	//run_avg[0] += accel_avg_x[imu_update_count];
	//run_avg[1] += accel_avg_y[imu_update_count];
	//run_avg[2] += accel_avg_z[imu_update_count];

	imu_update_count++;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <imu_update+0x2d0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <imu_update+0x2d0>)
 80014a4:	601a      	str	r2, [r3, #0]
	if(imu_update_count == num_imu_samples)
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <imu_update+0x2d0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8001544 <imu_update+0x2e4>
 80014b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	d102      	bne.n	80014c6 <imu_update+0x266>
		imu_update_count = 0;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <imu_update+0x2d0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
	accel_avg_y[199] = temp2_data[1];
	accel_avg_z[199] = temp2_data[2];
	*/

	// Reset the acceleration data.
	temp2_data[0] = 0;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <imu_update+0x2b8>)
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
	temp2_data[1] = 0;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <imu_update+0x2b8>)
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
	temp2_data[2] = 0;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <imu_update+0x2b8>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
	// Sum the averaging arrays
	for(i = 0; i < num_imu_samples; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e05e      	b.n	80015a2 <imu_update+0x342>
 80014e4:	20000040 	.word	0x20000040
 80014e8:	20000a64 	.word	0x20000a64
 80014ec:	20000084 	.word	0x20000084
 80014f0:	2000054c 	.word	0x2000054c
 80014f4:	20000098 	.word	0x20000098
 80014f8:	2000054e 	.word	0x2000054e
 80014fc:	20000564 	.word	0x20000564
 8001500:	3bfa232d 	.word	0x3bfa232d
 8001504:	40490fdb 	.word	0x40490fdb
 8001508:	20000a68 	.word	0x20000a68
 800150c:	43340000 	.word	0x43340000
 8001510:	20000558 	.word	0x20000558
 8001514:	3a1ce979 	.word	0x3a1ce979
 8001518:	20000a6c 	.word	0x20000a6c
 800151c:	2000059c 	.word	0x2000059c
 8001520:	20000588 	.word	0x20000588
 8001524:	20000574 	.word	0x20000574
 8001528:	20000088 	.word	0x20000088
 800152c:	20000f30 	.word	0x20000f30
 8001530:	20000080 	.word	0x20000080
 8001534:	20000060 	.word	0x20000060
 8001538:	2000009c 	.word	0x2000009c
 800153c:	20000a80 	.word	0x20000a80
 8001540:	200005b4 	.word	0x200005b4
 8001544:	43960000 	.word	0x43960000
		temp2_data[0] += accel_avg_x[i];
 8001548:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <imu_update+0x448>)
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	4a57      	ldr	r2, [pc, #348]	; (80016ac <imu_update+0x44c>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <imu_update+0x448>)
 8001560:	edc3 7a00 	vstr	s15, [r3]
		temp2_data[1] += accel_avg_y[i];
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <imu_update+0x448>)
 8001566:	ed93 7a01 	vldr	s14, [r3, #4]
 800156a:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <imu_update+0x450>)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <imu_update+0x448>)
 800157c:	edc3 7a01 	vstr	s15, [r3, #4]
		temp2_data[2] += accel_avg_z[i];
 8001580:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <imu_update+0x448>)
 8001582:	ed93 7a02 	vldr	s14, [r3, #8]
 8001586:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <imu_update+0x454>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <imu_update+0x448>)
 8001598:	edc3 7a02 	vstr	s15, [r3, #8]
	// Reset the acceleration data.
	temp2_data[0] = 0;
	temp2_data[1] = 0;
	temp2_data[2] = 0;
	// Sum the averaging arrays
	for(i = 0; i < num_imu_samples; i++) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ac:	eddf 7a42 	vldr	s15, [pc, #264]	; 80016b8 <imu_update+0x458>
 80015b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	d4c6      	bmi.n	8001548 <imu_update+0x2e8>
		temp2_data[1] += accel_avg_y[i];
		temp2_data[2] += accel_avg_z[i];
	}
	// Divide by the number of samples to get the average.
	// Try to filter out when rotational movement (right now only interested in linear movement for accelerometer).
	if((dAngle[0] > 0.01) || (dAngle[1] > 0.01) || (dAngle[2] > 0.01) ||
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff67 	bl	8000490 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a333      	add	r3, pc, #204	; (adr r3, 8001698 <imu_update+0x438>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff fa42 	bl	8000a58 <__aeabi_dcmpgt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d14f      	bne.n	800167a <imu_update+0x41a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff57 	bl	8000490 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	a32b      	add	r3, pc, #172	; (adr r3, 8001698 <imu_update+0x438>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff fa32 	bl	8000a58 <__aeabi_dcmpgt>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d13f      	bne.n	800167a <imu_update+0x41a>
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff47 	bl	8000490 <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	a323      	add	r3, pc, #140	; (adr r3, 8001698 <imu_update+0x438>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff fa22 	bl	8000a58 <__aeabi_dcmpgt>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d12f      	bne.n	800167a <imu_update+0x41a>
	   (dAngle[0] < -0.01) || (dAngle[1] < -0.01) || (dAngle[2] < -0.01)) {
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff37 	bl	8000490 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
		temp2_data[1] += accel_avg_y[i];
		temp2_data[2] += accel_avg_z[i];
	}
	// Divide by the number of samples to get the average.
	// Try to filter out when rotational movement (right now only interested in linear movement for accelerometer).
	if((dAngle[0] > 0.01) || (dAngle[1] > 0.01) || (dAngle[2] > 0.01) ||
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	a31d      	add	r3, pc, #116	; (adr r3, 80016a0 <imu_update+0x440>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7ff f9f4 	bl	8000a1c <__aeabi_dcmplt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11f      	bne.n	800167a <imu_update+0x41a>
	   (dAngle[0] < -0.01) || (dAngle[1] < -0.01) || (dAngle[2] < -0.01)) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff27 	bl	8000490 <__aeabi_f2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a315      	add	r3, pc, #84	; (adr r3, 80016a0 <imu_update+0x440>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f9e4 	bl	8000a1c <__aeabi_dcmplt>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10f      	bne.n	800167a <imu_update+0x41a>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff17 	bl	8000490 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	a30d      	add	r3, pc, #52	; (adr r3, 80016a0 <imu_update+0x440>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7ff f9d4 	bl	8000a1c <__aeabi_dcmplt>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d022      	beq.n	80016c0 <imu_update+0x460>
		accel_data[0] = 0;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <imu_update+0x45c>)
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
		accel_data[1] = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <imu_update+0x45c>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
		accel_data[2] = 0;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <imu_update+0x45c>)
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	e033      	b.n	80016fc <imu_update+0x49c>
 8001694:	f3af 8000 	nop.w
 8001698:	47ae147b 	.word	0x47ae147b
 800169c:	3f847ae1 	.word	0x3f847ae1
 80016a0:	47ae147b 	.word	0x47ae147b
 80016a4:	bf847ae1 	.word	0xbf847ae1
 80016a8:	20000a6c 	.word	0x20000a6c
 80016ac:	2000009c 	.word	0x2000009c
 80016b0:	20000a80 	.word	0x20000a80
 80016b4:	200005b4 	.word	0x200005b4
 80016b8:	43960000 	.word	0x43960000
 80016bc:	20000568 	.word	0x20000568
	}
	else {
		accel_data[0] = temp2_data[0]/num_imu_samples;
 80016c0:	4b98      	ldr	r3, [pc, #608]	; (8001924 <imu_update+0x6c4>)
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	eddf 7a98 	vldr	s15, [pc, #608]	; 8001928 <imu_update+0x6c8>
 80016ca:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80016ce:	4b97      	ldr	r3, [pc, #604]	; (800192c <imu_update+0x6cc>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
		accel_data[1] = temp2_data[1]/num_imu_samples;
 80016d4:	4b93      	ldr	r3, [pc, #588]	; (8001924 <imu_update+0x6c4>)
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	eddf 7a93 	vldr	s15, [pc, #588]	; 8001928 <imu_update+0x6c8>
 80016de:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80016e2:	4b92      	ldr	r3, [pc, #584]	; (800192c <imu_update+0x6cc>)
 80016e4:	edc3 7a01 	vstr	s15, [r3, #4]
		accel_data[2] = temp2_data[2]/num_imu_samples;
 80016e8:	4b8e      	ldr	r3, [pc, #568]	; (8001924 <imu_update+0x6c4>)
 80016ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ee:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8001928 <imu_update+0x6c8>
 80016f2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80016f6:	4b8d      	ldr	r3, [pc, #564]	; (800192c <imu_update+0x6cc>)
 80016f8:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	
	// Get velocity from acceleration
	vel_data[0] += accel_data[0]*0.5*dt;
 80016fc:	4b8c      	ldr	r3, [pc, #560]	; (8001930 <imu_update+0x6d0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fec5 	bl	8000490 <__aeabi_f2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <imu_update+0x6cc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe febe 	bl	8000490 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b84      	ldr	r3, [pc, #528]	; (8001934 <imu_update+0x6d4>)
 8001722:	f7fe ff09 	bl	8000538 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4690      	mov	r8, r2
 800172c:	4699      	mov	r9, r3
 800172e:	4b82      	ldr	r3, [pc, #520]	; (8001938 <imu_update+0x6d8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe feac 	bl	8000490 <__aeabi_f2d>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4640      	mov	r0, r8
 800173e:	4649      	mov	r1, r9
 8001740:	f7fe fefa 	bl	8000538 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe fd42 	bl	80001d4 <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff f988 	bl	8000a6c <__aeabi_d2f>
 800175c:	4602      	mov	r2, r0
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <imu_update+0x6d0>)
 8001760:	601a      	str	r2, [r3, #0]
	vel_data[1] += accel_data[1]*0.5*dt;
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <imu_update+0x6d0>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fe92 	bl	8000490 <__aeabi_f2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	4b6e      	ldr	r3, [pc, #440]	; (800192c <imu_update+0x6cc>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe8b 	bl	8000490 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <imu_update+0x6d4>)
 8001788:	f7fe fed6 	bl	8000538 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4690      	mov	r8, r2
 8001792:	4699      	mov	r9, r3
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <imu_update+0x6d8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe79 	bl	8000490 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4640      	mov	r0, r8
 80017a4:	4649      	mov	r1, r9
 80017a6:	f7fe fec7 	bl	8000538 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7fe fd0f 	bl	80001d4 <__adddf3>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f955 	bl	8000a6c <__aeabi_d2f>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <imu_update+0x6d0>)
 80017c6:	605a      	str	r2, [r3, #4]
	vel_data[2] += accel_data[2]*dt;
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <imu_update+0x6d0>)
 80017ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80017ce:	4b57      	ldr	r3, [pc, #348]	; (800192c <imu_update+0x6cc>)
 80017d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80017d4:	4b58      	ldr	r3, [pc, #352]	; (8001938 <imu_update+0x6d8>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <imu_update+0x6d0>)
 80017e4:	edc3 7a02 	vstr	s15, [r3, #8]
	
	// Get position from velocity.
	pos_data[0] += vel_data[0]*0.5*dt;
 80017e8:	4b54      	ldr	r3, [pc, #336]	; (800193c <imu_update+0x6dc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe4f 	bl	8000490 <__aeabi_f2d>
 80017f2:	4604      	mov	r4, r0
 80017f4:	460d      	mov	r5, r1
 80017f6:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <imu_update+0x6d0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe48 	bl	8000490 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b49      	ldr	r3, [pc, #292]	; (8001934 <imu_update+0x6d4>)
 800180e:	f7fe fe93 	bl	8000538 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4690      	mov	r8, r2
 8001818:	4699      	mov	r9, r3
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <imu_update+0x6d8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe36 	bl	8000490 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fe84 	bl	8000538 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fccc 	bl	80001d4 <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f912 	bl	8000a6c <__aeabi_d2f>
 8001848:	4602      	mov	r2, r0
 800184a:	4b3c      	ldr	r3, [pc, #240]	; (800193c <imu_update+0x6dc>)
 800184c:	601a      	str	r2, [r3, #0]
	pos_data[1] += vel_data[1]*0.5*dt;
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <imu_update+0x6dc>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe1c 	bl	8000490 <__aeabi_f2d>
 8001858:	4604      	mov	r4, r0
 800185a:	460d      	mov	r5, r1
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <imu_update+0x6d0>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe15 	bl	8000490 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <imu_update+0x6d4>)
 8001874:	f7fe fe60 	bl	8000538 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4690      	mov	r8, r2
 800187e:	4699      	mov	r9, r3
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <imu_update+0x6d8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe03 	bl	8000490 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4640      	mov	r0, r8
 8001890:	4649      	mov	r1, r9
 8001892:	f7fe fe51 	bl	8000538 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fc99 	bl	80001d4 <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f8df 	bl	8000a6c <__aeabi_d2f>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <imu_update+0x6dc>)
 80018b2:	605a      	str	r2, [r3, #4]
	pos_data[2] += vel_data[2]*0.5*dt;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <imu_update+0x6dc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fde9 	bl	8000490 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <imu_update+0x6d0>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fde2 	bl	8000490 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <imu_update+0x6d4>)
 80018da:	f7fe fe2d 	bl	8000538 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4690      	mov	r8, r2
 80018e4:	4699      	mov	r9, r3
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <imu_update+0x6d8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdd0 	bl	8000490 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4640      	mov	r0, r8
 80018f6:	4649      	mov	r1, r9
 80018f8:	f7fe fe1e 	bl	8000538 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fc66 	bl	80001d4 <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f8ac 	bl	8000a6c <__aeabi_d2f>
 8001914:	4602      	mov	r2, r0
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <imu_update+0x6dc>)
 8001918:	609a      	str	r2, [r3, #8]

}
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001922:	bf00      	nop
 8001924:	20000a6c 	.word	0x20000a6c
 8001928:	43960000 	.word	0x43960000
 800192c:	20000568 	.word	0x20000568
 8001930:	20000590 	.word	0x20000590
 8001934:	3fe00000 	.word	0x3fe00000
 8001938:	20000a68 	.word	0x20000a68
 800193c:	200005a8 	.word	0x200005a8

08001940 <body_to_earth>:
}

/*
	Convert a vector from the body from of reference to the earth frame of reference.
*/
void body_to_earth(arm_matrix_instance_f32 *result, arm_matrix_instance_f32 *angles, arm_matrix_instance_f32 *vector_data) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b096      	sub	sp, #88	; 0x58
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
			  roll_sin,
			  pitch_cos,
			  pitch_sin,
			  yaw_cos,
			  yaw_sin;
	roll_cos = arm_cos_f32(angles->pData[0]);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	eeb0 0a67 	vmov.f32	s0, s15
 8001958:	f000 fc64 	bl	8002224 <arm_cos_f32>
 800195c:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	roll_sin = arm_sin_f32(angles->pData[0]);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	f000 fc16 	bl	800219c <arm_sin_f32>
 8001970:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	pitch_cos = arm_cos_f32(angles->pData[1]);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	f000 fc4f 	bl	8002224 <arm_cos_f32>
 8001986:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	pitch_sin = arm_sin_f32(angles->pData[1]);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	f000 fc00 	bl	800219c <arm_sin_f32>
 800199c:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	yaw_cos = arm_cos_f32(angles->pData[2]);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	f000 fc39 	bl	8002224 <arm_cos_f32>
 80019b2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	yaw_sin = arm_sin_f32(angles->pData[2]);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	3308      	adds	r3, #8
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	f000 fbea 	bl	800219c <arm_sin_f32>
 80019c8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
 80019cc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80019d0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 80019d8:	edc7 7a05 	vstr	s15, [r7, #20]
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
 80019dc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80019e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80019e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80019f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001a00:	edc7 7a06 	vstr	s15, [r7, #24]
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
 8001a04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a08:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001a14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a1c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001a28:	edc7 7a07 	vstr	s15, [r7, #28]
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
						   pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
 8001a2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001a38:	edc7 7a08 	vstr	s15, [r7, #32]
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
						   pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
 8001a3c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a48:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001a4c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001a60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
						   pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
 8001a64:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a68:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a70:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a78:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001a7c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001a88:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
						   pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
						   -pitch_sin,                pitch_cos*roll_sin,                                               roll_cos*pitch_cos,
 8001a8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a90:	eef1 7a67 	vneg.f32	s15, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001a94:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
						   pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
						   -pitch_sin,                pitch_cos*roll_sin,                                               roll_cos*pitch_cos,
 8001a98:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a9c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001aa4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
						   pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
						   -pitch_sin,                pitch_cos*roll_sin,                                               roll_cos*pitch_cos,
 8001aa8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001aac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
	yaw_sin = arm_sin_f32(angles->pData[2]);

	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
 8001ab4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
						   yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin,
						   pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
						   -pitch_sin,                pitch_cos*roll_sin,                                               roll_cos*pitch_cos,
						   };
	arm_mat_init_f32(&R, 3, 3, (float32_t *)R_data);
 8001ab8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f000 fb65 	bl	8002194 <arm_mat_init_f32>
	
	// Compute the transformation.
	arm_mat_mult_f32(&R,vector_data,result);
 8001aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ace:	4618      	mov	r0, r3
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f000 faba 	bl	800204c <arm_mat_mult_f32>
	return;
 8001ad8:	bf00      	nop
}
 8001ada:	3758      	adds	r7, #88	; 0x58
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <TIM5_IRQHandler>:
	arm_mat_mult_f32(&R,vector_data,result);
	return;
}


void TIM5_IRQHandler(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	// Check to see if interrupt has occured.
	// No idea why it's needed for this board, but it doesn't work unless the
	// UIF bit is checked.
	if((TIM5->SR & TIM_SR_UIF) != 0) {
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <TIM5_IRQHandler+0x28>)
 8001ae6:	8a1b      	ldrh	r3, [r3, #16]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <TIM5_IRQHandler+0x16>
		imu_update();
 8001af2:	f7ff fbb5 	bl	8001260 <imu_update>
		//GPIOD->ODR ^= (1 << 13);
		//GPIOD->ODR ^= (1 << 14);
	}
	TIM5->SR &= ~TIM_SR_UIF;
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <TIM5_IRQHandler+0x28>)
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <TIM5_IRQHandler+0x28>)
 8001afa:	8a12      	ldrh	r2, [r2, #16]
 8001afc:	b292      	uxth	r2, r2
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	b292      	uxth	r2, r2
 8001b04:	821a      	strh	r2, [r3, #16]
}
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40000c00 	.word	0x40000c00

08001b0c <get_imu>:
}

/*
 * Function to get the data from the IMU
 */
void get_imu() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	//I2C1_read(I2C_addr, 0x3B, 14, raw_data);
	get_data(raw_data);
 8001b10:	4801      	ldr	r0, [pc, #4]	; (8001b18 <get_imu+0xc>)
 8001b12:	f7ff f8f1 	bl	8000cf8 <get_data>
}
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000040 	.word	0x20000040

08001b1c <I2C1_EV_IRQHandler>:
// Declare the I2C data struct for I2C1.
volatile I2C_data *I2C1_data;

// Use interrupts for the I2C. The idea of using this is to allow the processor to continue as the I2C has
// a (relatively) slow clock speed and communications can be several bytes long, taking even longer.
void I2C1_EV_IRQHandler(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
	// If the start bit has just been set.
	if(I2C1->SR1 & I2C_SR1_SB) {
 8001b22:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001b24:	8a9b      	ldrh	r3, [r3, #20]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d032      	beq.n	8001b96 <I2C1_EV_IRQHandler+0x7a>
		// If writing data or sending the destination register...
		if(I2C1_data->rd_wrt || (I2C1_data->state == dest_reg))
 8001b30:	4b83      	ldr	r3, [pc, #524]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	7b1b      	ldrb	r3, [r3, #12]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <I2C1_EV_IRQHandler+0x2c>
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	7b5b      	ldrb	r3, [r3, #13]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10b      	bne.n	8001b60 <I2C1_EV_IRQHandler+0x44>
			I2C1->DR = (uint8_t)((I2C1_data->slave_addr << 1) & ~(1 << 0));
 8001b48:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001b4a:	4a7d      	ldr	r2, [pc, #500]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	0052      	lsls	r2, r2, #1
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b5a:	b292      	uxth	r2, r2
 8001b5c:	821a      	strh	r2, [r3, #16]
 8001b5e:	e00b      	b.n	8001b78 <I2C1_EV_IRQHandler+0x5c>
		// Else, reading...
		else
			I2C1->DR = (uint8_t)((I2C1_data->slave_addr << 1) | (1 << 0));
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001b62:	4a77      	ldr	r2, [pc, #476]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	0052      	lsls	r2, r2, #1
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	821a      	strh	r2, [r3, #16]
		// Make sure that the byte_count is being set to 0. This may or not help, but was having issues with the value
		// not being set to 0 on a new communication, so this is a redundency to make sure that the value is in fact 0.
		if(I2C1_data->rd_wrt)
 8001b78:	4b71      	ldr	r3, [pc, #452]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	7b1b      	ldrb	r3, [r3, #12]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <I2C1_EV_IRQHandler+0x72>
			I2C1_data->byte_count = 0;
 8001b84:	4b6e      	ldr	r3, [pc, #440]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	739a      	strb	r2, [r3, #14]
 8001b8c:	e003      	b.n	8001b96 <I2C1_EV_IRQHandler+0x7a>
		else {
			I2C1_data->byte_count = 0;
 8001b8e:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	739a      	strb	r2, [r3, #14]
		}
	}
	// If the slave address has just been sent...
	if(I2C1->SR1 & I2C_SR1_ADDR) {
 8001b96:	4b69      	ldr	r3, [pc, #420]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001b98:	8a9b      	ldrh	r3, [r3, #20]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d028      	beq.n	8001bf6 <I2C1_EV_IRQHandler+0xda>
		uint32_t useless_temp = I2C1->SR2; // Need to read from SR2 in order to continue.
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001ba6:	8b1b      	ldrh	r3, [r3, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	607b      	str	r3, [r7, #4]
		// If sending the destination register...
		if(I2C1_data->state == dest_reg)
 8001bac:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	7b5b      	ldrb	r3, [r3, #13]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <I2C1_EV_IRQHandler+0xaa>
			I2C1->DR = (uint8_t)I2C1_data->dest_reg; // Set destination register address.
 8001bb8:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001bba:	4a61      	ldr	r2, [pc, #388]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	7852      	ldrb	r2, [r2, #1]
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	821a      	strh	r2, [r3, #16]
 8001bc4:	e00b      	b.n	8001bde <I2C1_EV_IRQHandler+0xc2>
		// If transmitting data, set the data.
		else if(I2C1_data->rd_wrt)
 8001bc6:	4b5e      	ldr	r3, [pc, #376]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	7b1b      	ldrb	r3, [r3, #12]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <I2C1_EV_IRQHandler+0xc2>
			I2C1->DR = (uint8_t)(*I2C1_data->write_data);
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001bd4:	4a5a      	ldr	r2, [pc, #360]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	6892      	ldr	r2, [r2, #8]
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	821a      	strh	r2, [r3, #16]
		if(!I2C1_data->rd_wrt) {
 8001bde:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	7b1b      	ldrb	r3, [r3, #12]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <I2C1_EV_IRQHandler+0xda>
			GPIOD->ODR |= (1 << 12);
 8001bea:	4b56      	ldr	r3, [pc, #344]	; (8001d44 <I2C1_EV_IRQHandler+0x228>)
 8001bec:	4a55      	ldr	r2, [pc, #340]	; (8001d44 <I2C1_EV_IRQHandler+0x228>)
 8001bee:	6952      	ldr	r2, [r2, #20]
 8001bf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bf4:	615a      	str	r2, [r3, #20]
		}
	}
	// If the data has been sent...
	if(I2C1->SR1 & I2C_SR1_TXE) {
 8001bf6:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001bf8:	8a9b      	ldrh	r3, [r3, #20]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d064      	beq.n	8001cce <I2C1_EV_IRQHandler+0x1b2>
		// If the destination register has been sent, re-start and change the state.
		if(I2C1_data->state == dest_reg) {
 8001c04:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	7b5b      	ldrb	r3, [r3, #13]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d114      	bne.n	8001c3a <I2C1_EV_IRQHandler+0x11e>
			I2C1->CR1 |= I2C_CR1_START; // Restart the I2C transfer.
 8001c10:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c12:	4a4a      	ldr	r2, [pc, #296]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	b292      	uxth	r2, r2
 8001c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	801a      	strh	r2, [r3, #0]
			I2C1_data->state = transm; // Change state
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2202      	movs	r2, #2
 8001c26:	735a      	strb	r2, [r3, #13]
			I2C1->CR1 |= I2C_CR1_ACK; // Just in case...
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c2a:	4a44      	ldr	r2, [pc, #272]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c2c:	8812      	ldrh	r2, [r2, #0]
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c34:	b292      	uxth	r2, r2
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e049      	b.n	8001cce <I2C1_EV_IRQHandler+0x1b2>
		}
		// Else, write data.
		else if(I2C1_data->rd_wrt) {
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	7b1b      	ldrb	r3, [r3, #12]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d043      	beq.n	8001cce <I2C1_EV_IRQHandler+0x1b2>
			// If all data has been sent, stop the I2C
			if(I2C1_data->byte_count == (I2C1_data->num_bytes-1)) {
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	7b9b      	ldrb	r3, [r3, #14]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	b25a      	sxtb	r2, r3
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	789b      	ldrb	r3, [r3, #2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d122      	bne.n	8001ca4 <I2C1_EV_IRQHandler+0x188>
				I2C1->CR1 &= ~I2C_CR1_ACK; // Make sure a NACK is set if needed.
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c60:	4a36      	ldr	r2, [pc, #216]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c62:	8812      	ldrh	r2, [r2, #0]
 8001c64:	b292      	uxth	r2, r2
 8001c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	801a      	strh	r2, [r3, #0]
				I2C1->CR1 |= I2C_CR1_STOP; // Stop the I2C clock.
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c70:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001c72:	8812      	ldrh	r2, [r2, #0]
 8001c74:	b292      	uxth	r2, r2
 8001c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	801a      	strh	r2, [r3, #0]
				// If using a callback, perform it then set the state to idle.
				if(I2C1_data->I2C_callback != NULL) {
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <I2C1_EV_IRQHandler+0x17e>
					(*(I2C1_data->I2C_callback))();
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	4798      	blx	r3
					I2C1_data->state = idle;
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	735a      	strb	r2, [r3, #13]
 8001c98:	e019      	b.n	8001cce <I2C1_EV_IRQHandler+0x1b2>
				}
				// Else just set the state to idle.
				else
					I2C1_data->state = idle;
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	735a      	strb	r2, [r3, #13]
 8001ca2:	e014      	b.n	8001cce <I2C1_EV_IRQHandler+0x1b2>
			}
			// Else all the data hasn't been sent.
			else {
				// Pull the data from the address and write to the data register.
				I2C1->DR = (uint8_t)(I2C1_data->write_data[I2C1_data->byte_count+1]);
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001ca6:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	6891      	ldr	r1, [r2, #8]
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	7b92      	ldrb	r2, [r2, #14]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	b252      	sxtb	r2, r2
 8001cb6:	3201      	adds	r2, #1
 8001cb8:	440a      	add	r2, r1
 8001cba:	7812      	ldrb	r2, [r2, #0]
 8001cbc:	821a      	strh	r2, [r3, #16]
				I2C1_data->byte_count++;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	7b93      	ldrb	r3, [r2, #14]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	7393      	strb	r3, [r2, #14]
			}
		}
	}
	// If just received data, read in the data, and stop the transmission.
	if(I2C1->SR1 & I2C_SR1_RXNE) {
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001cd0:	8a9b      	ldrh	r3, [r3, #20]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d053      	beq.n	8001d84 <I2C1_EV_IRQHandler+0x268>
		// If all of the data has been read in...
		if((I2C1_data->byte_count == (I2C1_data->num_bytes-2))) {
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	7b9b      	ldrb	r3, [r3, #14]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	b25a      	sxtb	r2, r3
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	789b      	ldrb	r3, [r3, #2]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3b02      	subs	r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d129      	bne.n	8001d48 <I2C1_EV_IRQHandler+0x22c>
			I2C1->CR1 &= ~I2C_CR1_ACK; // Tell the slave that you're stopping.
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001cf6:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d00:	b292      	uxth	r2, r2
 8001d02:	801a      	strh	r2, [r3, #0]
			I2C1->CR1 |= I2C_CR1_STOP; // Stop the clock.
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001d06:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <I2C1_EV_IRQHandler+0x220>)
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d10:	b292      	uxth	r2, r2
 8001d12:	801a      	strh	r2, [r3, #0]
			// If using a callback function, execute it, and set the state to idle.
			if(I2C1_data->I2C_callback != NULL) {
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <I2C1_EV_IRQHandler+0x214>
				(*(I2C1_data->I2C_callback))();
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	4798      	blx	r3
				I2C1_data->state = idle;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	735a      	strb	r2, [r3, #13]
 8001d2e:	e013      	b.n	8001d58 <I2C1_EV_IRQHandler+0x23c>
			}
			// Else just set the state to idle.
			else
				I2C1_data->state = idle;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <I2C1_EV_IRQHandler+0x224>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2200      	movs	r2, #0
 8001d36:	735a      	strb	r2, [r3, #13]
 8001d38:	e00e      	b.n	8001d58 <I2C1_EV_IRQHandler+0x23c>
 8001d3a:	bf00      	nop
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	20000f48 	.word	0x20000f48
 8001d44:	40020c00 	.word	0x40020c00
		}
		// Else, acknowledge that the data was recieved.
		else
			I2C1->CR1 |= I2C_CR1_ACK;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <I2C1_EV_IRQHandler+0x270>)
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <I2C1_EV_IRQHandler+0x270>)
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d54:	b292      	uxth	r2, r2
 8001d56:	801a      	strh	r2, [r3, #0]
		// Store the data that was read in.
		*(I2C1_data->read_data+I2C1_data->byte_count) = (uint8_t)I2C1->DR;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <I2C1_EV_IRQHandler+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <I2C1_EV_IRQHandler+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	7b9b      	ldrb	r3, [r3, #14]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <I2C1_EV_IRQHandler+0x270>)
 8001d6c:	8a12      	ldrh	r2, [r2, #16]
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
		I2C1_data->byte_count++;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <I2C1_EV_IRQHandler+0x274>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	7b93      	ldrb	r3, [r2, #14]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	7393      	strb	r3, [r2, #14]
	}


}
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40005400 	.word	0x40005400
 8001d90:	20000f48 	.word	0x20000f48

08001d94 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	e007      	b.n	8001dc8 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	801a      	strh	r2, [r3, #0]
  }
}
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop

08001dd4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	801a      	strh	r2, [r3, #0]
 8001df6:	e007      	b.n	8001e08 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	801a      	strh	r2, [r3, #0]
  }
}
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop

08001e14 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	460a      	mov	r2, r1
 8001e20:	70fa      	strb	r2, [r7, #3]
 8001e22:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001e24:	78bb      	ldrb	r3, [r7, #2]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	70fb      	strb	r3, [r7, #3]
 8001e32:	e003      	b.n	8001e3c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	821a      	strh	r2, [r3, #16]
}
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	e007      	b.n	8001e84 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	801a      	strh	r2, [r3, #0]
  }
}
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	821a      	strh	r2, [r3, #16]
}
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8a1b      	ldrh	r3, [r3, #16]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8a9b      	ldrh	r3, [r3, #20]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8b1b      	ldrh	r3, [r3, #24]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f06:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d102      	bne.n	8001f1a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001f14:	2301      	movs	r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	e001      	b.n	8001f1e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	0f1b      	lsrs	r3, r3, #28
 8001f4a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f52:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3314      	adds	r3, #20
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e005      	b.n	8001f6e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3318      	adds	r3, #24
 8001f6c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
 8001f7e:	e001      	b.n	8001f84 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop

08001f94 <arm_mat_sub_f32>:
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	e891 0090 	ldmia.w	r1, {r4, r7}
 8001f9a:	6803      	ldr	r3, [r0, #0]
 8001f9c:	6846      	ldr	r6, [r0, #4]
 8001f9e:	6855      	ldr	r5, [r2, #4]
 8001fa0:	42a3      	cmp	r3, r4
 8001fa2:	d14f      	bne.n	8002044 <arm_mat_sub_f32+0xb0>
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d14c      	bne.n	8002044 <arm_mat_sub_f32+0xb0>
 8001faa:	8842      	ldrh	r2, [r0, #2]
 8001fac:	8803      	ldrh	r3, [r0, #0]
 8001fae:	fb03 f002 	mul.w	r0, r3, r2
 8001fb2:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 8001fb6:	d033      	beq.n	8002020 <arm_mat_sub_f32+0x8c>
 8001fb8:	f106 0110 	add.w	r1, r6, #16
 8001fbc:	f107 0210 	add.w	r2, r7, #16
 8001fc0:	f105 0310 	add.w	r3, r5, #16
 8001fc4:	4674      	mov	r4, lr
 8001fc6:	ed51 6a03 	vldr	s13, [r1, #-12]
 8001fca:	ed12 5a03 	vldr	s10, [r2, #-12]
 8001fce:	ed51 7a04 	vldr	s15, [r1, #-16]
 8001fd2:	ed52 5a04 	vldr	s11, [r2, #-16]
 8001fd6:	ed11 7a02 	vldr	s14, [r1, #-8]
 8001fda:	ed12 6a02 	vldr	s12, [r2, #-8]
 8001fde:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8001fe2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8001fe6:	ed43 6a03 	vstr	s13, [r3, #-12]
 8001fea:	ed43 7a04 	vstr	s15, [r3, #-16]
 8001fee:	ed51 7a01 	vldr	s15, [r1, #-4]
 8001ff2:	ed52 6a01 	vldr	s13, [r2, #-4]
 8001ff6:	ee37 7a46 	vsub.f32	s14, s14, s12
 8001ffa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001ffe:	3c01      	subs	r4, #1
 8002000:	ed03 7a02 	vstr	s14, [r3, #-8]
 8002004:	ed43 7a01 	vstr	s15, [r3, #-4]
 8002008:	f101 0110 	add.w	r1, r1, #16
 800200c:	f102 0210 	add.w	r2, r2, #16
 8002010:	f103 0310 	add.w	r3, r3, #16
 8002014:	d1d7      	bne.n	8001fc6 <arm_mat_sub_f32+0x32>
 8002016:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800201a:	441e      	add	r6, r3
 800201c:	441f      	add	r7, r3
 800201e:	441d      	add	r5, r3
 8002020:	f010 0303 	ands.w	r3, r0, #3
 8002024:	bf18      	it	ne
 8002026:	462a      	movne	r2, r5
 8002028:	d009      	beq.n	800203e <arm_mat_sub_f32+0xaa>
 800202a:	ecf6 7a01 	vldmia	r6!, {s15}
 800202e:	ecb7 7a01 	vldmia	r7!, {s14}
 8002032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002036:	3b01      	subs	r3, #1
 8002038:	ece2 7a01 	vstmia	r2!, {s15}
 800203c:	d1f5      	bne.n	800202a <arm_mat_sub_f32+0x96>
 800203e:	2000      	movs	r0, #0
 8002040:	b240      	sxtb	r0, r0
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002044:	20fd      	movs	r0, #253	; 0xfd
 8002046:	b240      	sxtb	r0, r0
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204a:	bf00      	nop

0800204c <arm_mat_mult_f32>:
 800204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002050:	8843      	ldrh	r3, [r0, #2]
 8002052:	880d      	ldrh	r5, [r1, #0]
 8002054:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002058:	6854      	ldr	r4, [r2, #4]
 800205a:	8800      	ldrh	r0, [r0, #0]
 800205c:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8002060:	b087      	sub	sp, #28
 8002062:	429d      	cmp	r5, r3
 8002064:	9003      	str	r0, [sp, #12]
 8002066:	9404      	str	r4, [sp, #16]
 8002068:	f040 808d 	bne.w	8002186 <arm_mat_mult_f32+0x13a>
 800206c:	8813      	ldrh	r3, [r2, #0]
 800206e:	4283      	cmp	r3, r0
 8002070:	f040 8089 	bne.w	8002186 <arm_mat_mult_f32+0x13a>
 8002074:	8853      	ldrh	r3, [r2, #2]
 8002076:	4543      	cmp	r3, r8
 8002078:	f040 8085 	bne.w	8002186 <arm_mat_mult_f32+0x13a>
 800207c:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8002080:	f005 0303 	and.w	r3, r5, #3
 8002084:	461a      	mov	r2, r3
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f10a 33ff 	add.w	r3, sl, #4294967295
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8002094:	fb0b fb03 	mul.w	fp, fp, r3
 8002098:	3a01      	subs	r2, #1
 800209a:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 800209e:	00ab      	lsls	r3, r5, #2
 80020a0:	b292      	uxth	r2, r2
 80020a2:	9305      	str	r3, [sp, #20]
 80020a4:	2300      	movs	r3, #0
 80020a6:	3201      	adds	r2, #1
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	460b      	mov	r3, r1
 80020ac:	684c      	ldr	r4, [r1, #4]
 80020ae:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80020b2:	4651      	mov	r1, sl
 80020b4:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80020b8:	46da      	mov	sl, fp
 80020ba:	469b      	mov	fp, r3
 80020bc:	9b04      	ldr	r3, [sp, #16]
 80020be:	9a02      	ldr	r2, [sp, #8]
 80020c0:	2600      	movs	r6, #0
 80020c2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80020c6:	f10c 0510 	add.w	r5, ip, #16
 80020ca:	eddf 7a31 	vldr	s15, [pc, #196]	; 8002190 <arm_mat_mult_f32+0x144>
 80020ce:	2900      	cmp	r1, #0
 80020d0:	d057      	beq.n	8002182 <arm_mat_mult_f32+0x136>
 80020d2:	f10e 0210 	add.w	r2, lr, #16
 80020d6:	4623      	mov	r3, r4
 80020d8:	ed52 5a04 	vldr	s11, [r2, #-16]
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	ed12 7a03 	vldr	s14, [r2, #-12]
 80020e4:	ed12 5a02 	vldr	s10, [r2, #-8]
 80020e8:	ed12 6a01 	vldr	s12, [r2, #-4]
 80020ec:	4403      	add	r3, r0
 80020ee:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80020f2:	edd3 6a00 	vldr	s13, [r3]
 80020f6:	4403      	add	r3, r0
 80020f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80020fc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	4403      	add	r3, r0
 8002106:	ee77 5a27 	vadd.f32	s11, s14, s15
 800210a:	ee65 7a26 	vmul.f32	s15, s10, s13
 800210e:	edd3 6a00 	vldr	s13, [r3]
 8002112:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8002116:	3210      	adds	r2, #16
 8002118:	ee66 7a26 	vmul.f32	s15, s12, s13
 800211c:	42aa      	cmp	r2, r5
 800211e:	4403      	add	r3, r0
 8002120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002124:	d1d8      	bne.n	80020d8 <arm_mat_mult_f32+0x8c>
 8002126:	4454      	add	r4, sl
 8002128:	4663      	mov	r3, ip
 800212a:	9a01      	ldr	r2, [sp, #4]
 800212c:	b162      	cbz	r2, 8002148 <arm_mat_mult_f32+0xfc>
 800212e:	eb03 0209 	add.w	r2, r3, r9
 8002132:	ecf3 6a01 	vldmia	r3!, {s13}
 8002136:	ed94 7a00 	vldr	s14, [r4]
 800213a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800213e:	4293      	cmp	r3, r2
 8002140:	4404      	add	r4, r0
 8002142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002146:	d1f4      	bne.n	8002132 <arm_mat_mult_f32+0xe6>
 8002148:	ece7 7a01 	vstmia	r7!, {s15}
 800214c:	3601      	adds	r6, #1
 800214e:	b2b6      	uxth	r6, r6
 8002150:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002154:	4546      	cmp	r6, r8
 8002156:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 800215a:	d1b6      	bne.n	80020ca <arm_mat_mult_f32+0x7e>
 800215c:	9a03      	ldr	r2, [sp, #12]
 800215e:	9c02      	ldr	r4, [sp, #8]
 8002160:	9d05      	ldr	r5, [sp, #20]
 8002162:	3a01      	subs	r2, #1
 8002164:	4434      	add	r4, r6
 8002166:	b2a4      	uxth	r4, r4
 8002168:	b292      	uxth	r2, r2
 800216a:	9402      	str	r4, [sp, #8]
 800216c:	9203      	str	r2, [sp, #12]
 800216e:	44ae      	add	lr, r5
 8002170:	44ac      	add	ip, r5
 8002172:	461c      	mov	r4, r3
 8002174:	2a00      	cmp	r2, #0
 8002176:	d1a1      	bne.n	80020bc <arm_mat_mult_f32+0x70>
 8002178:	4610      	mov	r0, r2
 800217a:	b240      	sxtb	r0, r0
 800217c:	b007      	add	sp, #28
 800217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002182:	4673      	mov	r3, lr
 8002184:	e7d1      	b.n	800212a <arm_mat_mult_f32+0xde>
 8002186:	20fd      	movs	r0, #253	; 0xfd
 8002188:	b240      	sxtb	r0, r0
 800218a:	b007      	add	sp, #28
 800218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002190:	00000000 	.word	0x00000000

08002194 <arm_mat_init_f32>:
 8002194:	8001      	strh	r1, [r0, #0]
 8002196:	8042      	strh	r2, [r0, #2]
 8002198:	6043      	str	r3, [r0, #4]
 800219a:	4770      	bx	lr

0800219c <arm_sin_f32>:
 800219c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002218 <arm_sin_f32+0x7c>
 80021a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80021a4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80021b0:	d42c      	bmi.n	800220c <arm_sin_f32+0x70>
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800221c <arm_sin_f32+0x80>
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <arm_sin_f32+0x84>)
 80021bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 80021c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021c8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80021cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d0:	bfa8      	it	ge
 80021d2:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80021d6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80021da:	ee17 3a10 	vmov	r3, s14
 80021de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e2:	ee07 3a10 	vmov	s14, r3
 80021e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021ea:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80021ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021f2:	edd1 6a01 	vldr	s13, [r1, #4]
 80021f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80021fa:	ed91 0a00 	vldr	s0, [r1]
 80021fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002202:	ee27 0a00 	vmul.f32	s0, s14, s0
 8002206:	ee30 0a27 	vadd.f32	s0, s0, s15
 800220a:	4770      	bx	lr
 800220c:	ee17 3a90 	vmov	r3, s15
 8002210:	3b01      	subs	r3, #1
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	e7cc      	b.n	80021b2 <arm_sin_f32+0x16>
 8002218:	3e22f983 	.word	0x3e22f983
 800221c:	44000000 	.word	0x44000000
 8002220:	08002308 	.word	0x08002308

08002224 <arm_cos_f32>:
 8002224:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002298 <arm_cos_f32+0x74>
 8002228:	ee20 0a27 	vmul.f32	s0, s0, s15
 800222c:	eef5 7a00 	vmov.f32	s15, #80	; 0x50
 8002230:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002234:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002240:	d504      	bpl.n	800224c <arm_cos_f32+0x28>
 8002242:	ee17 3a90 	vmov	r3, s15
 8002246:	3b01      	subs	r3, #1
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002250:	eddf 6a12 	vldr	s13, [pc, #72]	; 800229c <arm_cos_f32+0x78>
 8002254:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <arm_cos_f32+0x7c>)
 8002256:	ee30 0a67 	vsub.f32	s0, s0, s15
 800225a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800225e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002262:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800227a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800227e:	edd1 6a01 	vldr	s13, [r1, #4]
 8002282:	ed91 0a00 	vldr	s0, [r1]
 8002286:	ee37 7a67 	vsub.f32	s14, s14, s15
 800228a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800228e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8002292:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002296:	4770      	bx	lr
 8002298:	3e22f983 	.word	0x3e22f983
 800229c:	44000000 	.word	0x44000000
 80022a0:	08002308 	.word	0x08002308

080022a4 <__libc_init_array>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <__libc_init_array+0x3c>)
 80022a8:	4d0e      	ldr	r5, [pc, #56]	; (80022e4 <__libc_init_array+0x40>)
 80022aa:	1aed      	subs	r5, r5, r3
 80022ac:	10ad      	asrs	r5, r5, #2
 80022ae:	2400      	movs	r4, #0
 80022b0:	461e      	mov	r6, r3
 80022b2:	42ac      	cmp	r4, r5
 80022b4:	d004      	beq.n	80022c0 <__libc_init_array+0x1c>
 80022b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80022ba:	4790      	blx	r2
 80022bc:	3401      	adds	r4, #1
 80022be:	e7f8      	b.n	80022b2 <__libc_init_array+0xe>
 80022c0:	f000 f816 	bl	80022f0 <_init>
 80022c4:	4d08      	ldr	r5, [pc, #32]	; (80022e8 <__libc_init_array+0x44>)
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <__libc_init_array+0x48>)
 80022c8:	1aed      	subs	r5, r5, r3
 80022ca:	10ad      	asrs	r5, r5, #2
 80022cc:	2400      	movs	r4, #0
 80022ce:	461e      	mov	r6, r3
 80022d0:	42ac      	cmp	r4, r5
 80022d2:	d004      	beq.n	80022de <__libc_init_array+0x3a>
 80022d4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80022d8:	4790      	blx	r2
 80022da:	3401      	adds	r4, #1
 80022dc:	e7f8      	b.n	80022d0 <__libc_init_array+0x2c>
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	08002b0c 	.word	0x08002b0c
 80022e4:	08002b0c 	.word	0x08002b0c
 80022e8:	08002b10 	.word	0x08002b10
 80022ec:	08002b0c 	.word	0x08002b0c

080022f0 <_init>:
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f2:	bf00      	nop
 80022f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f6:	bc08      	pop	{r3}
 80022f8:	469e      	mov	lr, r3
 80022fa:	4770      	bx	lr

080022fc <_fini>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	bf00      	nop
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr
