#include "IMU.h"

void init_imu(uint32_t _dt) {	
	// Initialize all variables;
	dt = (float32_t)(_dt*0.001); // Scale dt from milliseconds to seconds.
	
	// Initialize matrices
	angle_data = {0,0,0};
	vel_data = {0,0,0};
	pos_data = {0,0,0};
	temp_data = {0,0,0};
	arm_mat_init_f32(&angle_mat,3,1,(float32_t *)angle_data);
	arm_mat_init_f32(&vel_mat,3,1,(float32_t *)vel_data);
	arm_mat_init_f32(&pos_mat,3,1,(float32_t *)pos_data);
	arm_mat_init_f32(&g_mat,3,1,(float32_t *)g_vec);
	arm_mat_init_f32(&temp_mat,3,1,(float32_t *)temp_data);
	
	// Get the data and find out the orientation using gravity.
	// Because the accelerometer can be noisy, gather the data multiple times
	// and average the results.
	// NOTE: THIS STILL NEEDS TO BE DOUBLE CHECKED IN SOMEHING LIKE MATLAB TO 
	//            MAKE SURE THE RESULTS ARE CORRECT!
	/*
	for(uint32_t i=0;i<10;i++) {
		get_data(raw_data);
		x_accel = (int16_t)((raw_data[0] << 8) | raw_data[1]);
		y_accel = (int16_t)((raw_data[2] << 8) | raw_data[3]);
		z_accel = (int16_t)((raw_data[4] << 8) | raw_data[5]);
		// Can find the angle by taking the inverse cosine using measured force and
		// the force of gravity (gravity is the hypotenuse of the triangle).
		angle_data[0] += (float32_t)acosf((float32_t)(x_accel/(coeff_accel*g)));
		angle_data[1] += (float32_t)acosf((float32_t)(y_accel/(coeff_accel*g)));
		angle_data[2] += (float32_t)acosf((float32_t)(z_accel/(coeff_accel*g)));
	}
	arm_mat_scale_f32(&angle_mat, 0.1, &angle_mat);
	*/
	
	// Set up the timer to read from the IMU and calculate data.
	RCC->APB1ENR |= (1 << 0); // Enable TIM2 clock.
	TIM2->DIER |= (1 << 0); // Enable interrupt
	TIM2->PSC = 79; // Timer prescaler. Down to a 1ms period
	TIM2->ARR = _dt; // The amount of time between reads
	NVIC->ISER[0] |= (1 << 28); // Enable the interrupt .
	TIM2->CR1 &= ~(1 << 1); // Make sure UEV is enabled	
}

/*
	Update the kinematic variables. 
	This gets the raw data over I2C and calculates the 
*/

void imu_update() {
	// Collect the raw data from the IMU and put it into it's full variables
	get_data(raw_data);
	x_accel = (int16_t)((raw_data[0] << 8) | raw_data[1]);
	y_accel = (int16_t)((raw_data[2] << 8) | raw_data[3]);
	z_accel = (int16_t)((raw_data[4] << 8) | raw_data[5]);
	y_gyro = (int16_t)((raw_data[8] << 8) | raw_data[9]);
	x_gyro = (int16_t)((raw_data[10] << 8) | raw_data[11]);
	z_gyro = (int16_t)((raw_data[12] << 8) | raw_data[13]);
	
	// Scale gyro data using constant (based on the range that is set, see data sheet to 
	// know for sure what the conversion constant is), then convert from degrees (default) to radians
	// Need to multiply by dt to change from degrees/sec to degrees.
	angle_data[0] += (float32_t)(x_gyro*coeff_gyro*PI*dt)/(180.0f);
	angle_data[1] += (float32_t)(y_gyro*coeff_gyro*PI*dt)/(180.0f);
	angle_data[2] += (float32_t)(z_gyro*coeff_gyro*PI*dt)/(180.0f);
	
	accel_data[0] = (float32_t)(x_accel*coeff_accel);
	accel_data[1] = (float32_t)(y_accel*coeff_accel);
	accel_data[2] = (float32_t)(z_accel*coeff_accel);
	// Remove the gravitational component from the acceleration data.
	// First, but acceleration into the body frame of reference.
	body_to_earth(&accel_data,&angle_data,&accel_data);
	// Then subtract the gravity from the acceleration. 
	arm_mat_sub_f32(&accel_data, &g_mat, &accel_data); 
	
	// Get velocity from acceleration
	vel_data[0] += accel_data->pData[0]*dt;
	vel_data[1] += accel_data->pData[1]*dt;
	vel_data[2] += accel_data->pData[2]*dt;
	
	// Get position from velocity.
	pos_data[0] += accel_data->pData[0]*dt*dt*0.5;
	pos_data[1] += accel_data->pData[1]*dt*dt*0.5;
	pos_data[2] += accel_data->pData[2]*dt*dt*0.5;
}

/*
	Find the magnitude of a vector.
*/
void get_mag(float32_t *vector, float32_t *result) {
	float32_t temp = 0; 
	for(uint8_t i=0;i<3;i++) 
		temp += vector[i]*vector[i];
	arm_sqrt_f32(temp, &result);
}

/*
	Convert a vector from the body from of reference to the earth frame of reference.
*/
void body_to_earth(arm_matrix_instance_f32 *result, arm_matrix_instance_f32 *angles, arm_matrix_instance_f32 *vector_data) {
	// Get the sine and cosine of the angles.
	float32_t roll_cos = 0, 
					roll_sin = 0, 
					pitch_cos = 0, 
					pitch_sin = 0,
					yaw_cos = 0, 
					yaw_sin = 0;
	arm_sin_cos_f32(angles->pData[0], &roll_sin, &roll_cos);
	arm_sin_cos_f32(angles->pData[1], &pitch_sin, &pitch_cos);
	arm_sin_cos_f32(angles->pData[2], &yaw_sin, &yaw_cos);
	
	// Create the transformation matrix
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
									      yaw_cos*pitch_cos, yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin, 
									      pitch_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin,
									      -pitch_sin,                pitch_cos*roll_sin,                                               roll_cos*pitch_cos,
									     };
	arm_mat_init_f32(&R, 3, 3, (float32_t *)R_data);
	
	// Compute the transformation.
	arm_mat_mult_f32(&R,&vector_data, &result);
	
}

/*
	Convert a vector from the earth frame of reference to body frame of reference.
*/
void earth_to_body(arm_matrix_instance_f32 *result, arm_matrix_instance_f32 *angles, arm_matrix_instance_f32 *vector_data) {
	// Get the sine and cosine of the angles.
	float32_t roll_cos = 0, 
					roll_sin = 0, 
					pitch_cos = 0, 
					pitch_sin = 0,
					yaw_cos = 0, 
					yaw_sin = 0;
	arm_sin_cos_f32(angles->pData[0], &roll_sin, &roll_cos);
	arm_sin_cos_f32(angles->pData[1], &pitch_sin, &pitch_cos);
	arm_sin_cos_f32(angles->pData[2], &yaw_sin, &yaw_cos);
	
	// Create the transformation matrix	
	arm_matrix_instance_f32 R;
	float32_t R_data[9] = {
										  yaw_cos*pitch_cos,                                            pitch_cos*yaw_sin,                                             -pitch_sin,
										  yaw_cos*roll_sin*pitch_sin - roll_cos*yaw_sin, roll_cos*yaw_cos + roll_sin*yaw_sin*pitch_sin, pitch_cos*roll_sin,
										  roll_sin*yaw_sin + roll_cos*yaw_cos*pitch_sin, roll_cos*yaw_sin*pitch_sin - yaw_cos*roll_sin, roll_cos*pitch_cos,
										 };
	arm_mat_init_f32(&R, 3, 3, (float32_t *)R_data);
	
	// Compute the transformation.
	arm_mat_mult_f32(&R,&vector_data,&result);
}

void TIM2_IRQHandler(void) {
	imu_update();
	TIM2->SR &= 0xFFFE;
}

void start_imu() {
	TIM2->CR1 |=  (1 << 0); // Start the timer.
}

void stop_imu() {
	TIM2->CR1 &= ~(1 << 0); // Stop the timer.
}



































