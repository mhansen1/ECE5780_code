#include <stdio.h>
#include <stdlib.h>
#include "diag/Trace.h"
#include "stm32f0xx.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

int main(int argc, char* argv[])
{
	RCC->AHBENR |= 0x000A0000;
	GPIOC->MODER &= 0xFFF0FFFF;
	GPIOC->MODER |= 0x00050000;
	
	volatile uint8_t data = (uint8_t)105;
	volatile uint8_t data2 = (uint8_t)0;
    // Use PB6 (SCL) and PB7 (SDA) for I2C1.
	// GPIO AF is AF1
	RCC->AHBENR |= (1 << 18); // Enable GPIOB clock.
	GPIOB->MODER |= (5 << 13); // Set to AF.
	GPIOB->OTYPER |= (3 << 6); // Set GPIO to open-drain
	GPIOB->AFR[0] |= (17 << 24); // Set to correct AF.
	// Setup the I2C1
	RCC->APB1ENR |= (1 << 21); // Enable I2C1 clock.
	I2C1->CR1 |= (2 << 8); // Set digital filter to 2.
	I2C1->CR1 |= (1 << 12); // Turn on analog filter.
	//I2C1->CR2 |= (1 << 25); // Set AUTOEND
	I2C1->CR2 |= (1 << 16); // 1 by transferred/received.
	// Slave address = 0110 1000 = 0x68
	I2C1->CR2 |= (0x68 << 1);
	I2C1->TIMINGR =0x00B01A4B;
	I2C1->CR1 |= (1 << 0); // Enable I2C peripheral
	
	//while (1)
	//	{
			I2C1->CR2 &= ~(1 << 10); // Set to write mode.
			I2C1->TXDR = (uint8_t)117; // Set transmit byte into TXDR (address)
			I2C1->CR2 |= (1 << 13); // Set START signal.
			while(!(I2C1->ISR&0x00000001)) {
				GPIOC->ODR |= (1 << 8);
				data2 = I2C1->TXDR;
			} // Wait until TX is done.
			GPIOC->ODR &= ~(1 << 8);
			I2C1->CR2 |= (1 << 14); // Set STOP signal.
			I2C1->CR2 |= (1 << 10); // Set to read Mode
			I2C1->CR2 |= (1 << 13); // Set START signal.
			while(!(I2C1->ISR&0x00000004))// Wait until RX is done.
			data = I2C1->RXDR; // Read byte into variable
			I2C1->CR2 |= (1 << 14); // Set STOP signal.
	//	}
	while(1) {
		
	}
}

#pragma GCC diagnostic pop

