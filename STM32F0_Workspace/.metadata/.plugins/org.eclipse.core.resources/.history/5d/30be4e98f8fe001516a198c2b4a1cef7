#include <stdio.h>
#include <stdlib.h>
#include "diag/Trace.h"
#include "stm32f0xx.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

int main(int argc, char* argv[])
{
	RCC->AHBENR |= 0x000A0000;
	GPIOC->MODER &= 0xFFF0FFFF;
	GPIOC->MODER |= 0x00050000;
	
	volatile uint8_t data = (uint8_t)105;
	volatile uint32_t data2 = (uint32_t)110;
    
	// Setup GPIO to AF
	// Use PB10 (SCL) and PB11 (SDA)
	RCC->AHBENR |= (1 << 18); // Enable GPIOB clock.
	GPIOB->MODER |= (1 << 21); // Set PB10 to AF.
	GPIOB->MODER |= (1 << 23); // Set PB11 to AF.
	GPIOB->AFR[1] |= (1 << 8); // Set PB10 to AF1.
	GPIOB->AFR[1] |= (1 << 12); // Set PB11 to AF1.
	
	// Set GPIO to open-drain
	GPIOB->OTYPER |= (1 << 10); // Set PB10 to open-drain.
	GPIOB->OTYPER |= (1 << 11); // Set PB11 to open-drain.
	
	// Enable I2C RCC
	RCC->APB1RSTR |= (1 << 22);
	for(uint8_t i=0;i<100;i++) {;}
	RCC->APB1RSTR &= ~(1 << 22);
	RCC->APB1ENR |= (1 << 22);
	
	// Configure I2C CR1
	I2C2->CR1 &= ~(1 << 0);
	I2C2->CR1 |= (2 << 8); // Set digital filter to 2.
	I2C2->CR1 |= (1 << 1);
	
	// Configure TIMINGR
	I2C2->TIMINGR |= (0xB << 28);
	I2C2->TIMINGR |= (0x13 << 0);
	I2C2->TIMINGR |= (0xF << 8);
	I2C2->TIMINGR |= (0x2 << 16);
	I2C2->TIMINGR |= (0x4 << 20);
	
	// Start I2C peripheral
	I2C2->CR1 |= (1 << 0);
	
	// Set slave address.
	// Address is 0110 1000 = 0x68 = 104
	I2C2->CR2 |= (0x68 << 1);
	
	// Set number of bytes to transfer
	I2C2->CR2 |= (1 << 16);
	
	// Set to write mode
	I2C2->CR2 &= ~(1 << 10);
	
	// Set first data bytes
	// PMOD gyro: 0011 0100 = 0x34
	I2C2->TXDR  = (uint8_t)117;
	
	// Set START signal
	I2C2->CR2  |= (1 << 13);
	
	// Wait until TX is done.
	data2 = I2C2->ISR;
	while(!(I2C2->ISR&(1<<1))) {
		if(I2C2->ISR)
			GPIOC->ODR |= (1 << 8);
		else
			GPIOC->ODR &= ~(1 << 8);
		data2 = GPIOB->ODR&(1<<10);
		if(data2)
			GPIOC->ODR |= (1 << 9);
	}
	GPIOC->ODR |= (1 << 9);
	
	// Set to read mode.
	I2C2->CR2 |= (1 << 10);
	
	// Set START signal.
	I2C2->CR1 |= (1 << 13);
	
	// Wait until RX is done
	while(!(I2C2->ISR&(1<<2))) {;}
	
	// Get data.
	data = I2C2->RXDR;
	
	while(1) {
		
	}
}

#pragma GCC diagnostic pop

